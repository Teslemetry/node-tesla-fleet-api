// source: universal_message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var signatures_pb = require('./signatures_pb.js');
goog.object.extend(proto, signatures_pb);
goog.exportSymbol('proto.UniversalMessage.Destination', null, global);
goog.exportSymbol('proto.UniversalMessage.Destination.SubDestinationCase', null, global);
goog.exportSymbol('proto.UniversalMessage.Domain', null, global);
goog.exportSymbol('proto.UniversalMessage.Flags', null, global);
goog.exportSymbol('proto.UniversalMessage.MessageFault_E', null, global);
goog.exportSymbol('proto.UniversalMessage.MessageStatus', null, global);
goog.exportSymbol('proto.UniversalMessage.OperationStatus_E', null, global);
goog.exportSymbol('proto.UniversalMessage.RoutableMessage', null, global);
goog.exportSymbol('proto.UniversalMessage.RoutableMessage.PayloadCase', null, global);
goog.exportSymbol('proto.UniversalMessage.RoutableMessage.SubSigdataCase', null, global);
goog.exportSymbol('proto.UniversalMessage.SessionInfoRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UniversalMessage.Destination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UniversalMessage.Destination.oneofGroups_);
};
goog.inherits(proto.UniversalMessage.Destination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UniversalMessage.Destination.displayName = 'proto.UniversalMessage.Destination';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UniversalMessage.MessageStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UniversalMessage.MessageStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UniversalMessage.MessageStatus.displayName = 'proto.UniversalMessage.MessageStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UniversalMessage.SessionInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UniversalMessage.SessionInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UniversalMessage.SessionInfoRequest.displayName = 'proto.UniversalMessage.SessionInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UniversalMessage.RoutableMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.UniversalMessage.RoutableMessage.oneofGroups_);
};
goog.inherits(proto.UniversalMessage.RoutableMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.UniversalMessage.RoutableMessage.displayName = 'proto.UniversalMessage.RoutableMessage';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UniversalMessage.Destination.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.UniversalMessage.Destination.SubDestinationCase = {
  SUB_DESTINATION_NOT_SET: 0,
  DOMAIN: 1,
  ROUTING_ADDRESS: 2
};

/**
 * @return {proto.UniversalMessage.Destination.SubDestinationCase}
 */
proto.UniversalMessage.Destination.prototype.getSubDestinationCase = function() {
  return /** @type {proto.UniversalMessage.Destination.SubDestinationCase} */(jspb.Message.computeOneofCase(this, proto.UniversalMessage.Destination.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UniversalMessage.Destination.prototype.toObject = function(opt_includeInstance) {
  return proto.UniversalMessage.Destination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UniversalMessage.Destination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UniversalMessage.Destination.toObject = function(includeInstance, msg) {
  var f, obj = {
    domain: jspb.Message.getFieldWithDefault(msg, 1, 0),
    routingAddress: msg.getRoutingAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UniversalMessage.Destination}
 */
proto.UniversalMessage.Destination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UniversalMessage.Destination;
  return proto.UniversalMessage.Destination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UniversalMessage.Destination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UniversalMessage.Destination}
 */
proto.UniversalMessage.Destination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.UniversalMessage.Domain} */ (reader.readEnum());
      msg.setDomain(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoutingAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UniversalMessage.Destination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UniversalMessage.Destination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UniversalMessage.Destination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UniversalMessage.Destination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.UniversalMessage.Domain} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional Domain domain = 1;
 * @return {!proto.UniversalMessage.Domain}
 */
proto.UniversalMessage.Destination.prototype.getDomain = function() {
  return /** @type {!proto.UniversalMessage.Domain} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.UniversalMessage.Domain} value
 * @return {!proto.UniversalMessage.Destination} returns this
 */
proto.UniversalMessage.Destination.prototype.setDomain = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.UniversalMessage.Destination.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.UniversalMessage.Destination} returns this
 */
proto.UniversalMessage.Destination.prototype.clearDomain = function() {
  return jspb.Message.setOneofField(this, 1, proto.UniversalMessage.Destination.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UniversalMessage.Destination.prototype.hasDomain = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes routing_address = 2;
 * @return {!(string|Uint8Array)}
 */
proto.UniversalMessage.Destination.prototype.getRoutingAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes routing_address = 2;
 * This is a type-conversion wrapper around `getRoutingAddress()`
 * @return {string}
 */
proto.UniversalMessage.Destination.prototype.getRoutingAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoutingAddress()));
};


/**
 * optional bytes routing_address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoutingAddress()`
 * @return {!Uint8Array}
 */
proto.UniversalMessage.Destination.prototype.getRoutingAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoutingAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.UniversalMessage.Destination} returns this
 */
proto.UniversalMessage.Destination.prototype.setRoutingAddress = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.UniversalMessage.Destination.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.UniversalMessage.Destination} returns this
 */
proto.UniversalMessage.Destination.prototype.clearRoutingAddress = function() {
  return jspb.Message.setOneofField(this, 2, proto.UniversalMessage.Destination.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UniversalMessage.Destination.prototype.hasRoutingAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UniversalMessage.MessageStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.UniversalMessage.MessageStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UniversalMessage.MessageStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UniversalMessage.MessageStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    operationStatus: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signedMessageFault: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UniversalMessage.MessageStatus}
 */
proto.UniversalMessage.MessageStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UniversalMessage.MessageStatus;
  return proto.UniversalMessage.MessageStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UniversalMessage.MessageStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UniversalMessage.MessageStatus}
 */
proto.UniversalMessage.MessageStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.UniversalMessage.OperationStatus_E} */ (reader.readEnum());
      msg.setOperationStatus(value);
      break;
    case 2:
      var value = /** @type {!proto.UniversalMessage.MessageFault_E} */ (reader.readEnum());
      msg.setSignedMessageFault(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UniversalMessage.MessageStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UniversalMessage.MessageStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UniversalMessage.MessageStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UniversalMessage.MessageStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperationStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSignedMessageFault();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional OperationStatus_E operation_status = 1;
 * @return {!proto.UniversalMessage.OperationStatus_E}
 */
proto.UniversalMessage.MessageStatus.prototype.getOperationStatus = function() {
  return /** @type {!proto.UniversalMessage.OperationStatus_E} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.UniversalMessage.OperationStatus_E} value
 * @return {!proto.UniversalMessage.MessageStatus} returns this
 */
proto.UniversalMessage.MessageStatus.prototype.setOperationStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional MessageFault_E signed_message_fault = 2;
 * @return {!proto.UniversalMessage.MessageFault_E}
 */
proto.UniversalMessage.MessageStatus.prototype.getSignedMessageFault = function() {
  return /** @type {!proto.UniversalMessage.MessageFault_E} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.UniversalMessage.MessageFault_E} value
 * @return {!proto.UniversalMessage.MessageStatus} returns this
 */
proto.UniversalMessage.MessageStatus.prototype.setSignedMessageFault = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UniversalMessage.SessionInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.UniversalMessage.SessionInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UniversalMessage.SessionInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UniversalMessage.SessionInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: msg.getPublicKey_asB64(),
    challenge: msg.getChallenge_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UniversalMessage.SessionInfoRequest}
 */
proto.UniversalMessage.SessionInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UniversalMessage.SessionInfoRequest;
  return proto.UniversalMessage.SessionInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UniversalMessage.SessionInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UniversalMessage.SessionInfoRequest}
 */
proto.UniversalMessage.SessionInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChallenge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UniversalMessage.SessionInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UniversalMessage.SessionInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UniversalMessage.SessionInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UniversalMessage.SessionInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getChallenge_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.UniversalMessage.SessionInfoRequest.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.UniversalMessage.SessionInfoRequest.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.UniversalMessage.SessionInfoRequest.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.UniversalMessage.SessionInfoRequest} returns this
 */
proto.UniversalMessage.SessionInfoRequest.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes challenge = 2;
 * @return {!(string|Uint8Array)}
 */
proto.UniversalMessage.SessionInfoRequest.prototype.getChallenge = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes challenge = 2;
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {string}
 */
proto.UniversalMessage.SessionInfoRequest.prototype.getChallenge_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChallenge()));
};


/**
 * optional bytes challenge = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {!Uint8Array}
 */
proto.UniversalMessage.SessionInfoRequest.prototype.getChallenge_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChallenge()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.UniversalMessage.SessionInfoRequest} returns this
 */
proto.UniversalMessage.SessionInfoRequest.prototype.setChallenge = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.UniversalMessage.RoutableMessage.oneofGroups_ = [[10,14,15],[13]];

/**
 * @enum {number}
 */
proto.UniversalMessage.RoutableMessage.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  PROTOBUF_MESSAGE_AS_BYTES: 10,
  SESSION_INFO_REQUEST: 14,
  SESSION_INFO: 15
};

/**
 * @return {proto.UniversalMessage.RoutableMessage.PayloadCase}
 */
proto.UniversalMessage.RoutableMessage.prototype.getPayloadCase = function() {
  return /** @type {proto.UniversalMessage.RoutableMessage.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.UniversalMessage.RoutableMessage.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.UniversalMessage.RoutableMessage.SubSigdataCase = {
  SUB_SIGDATA_NOT_SET: 0,
  SIGNATURE_DATA: 13
};

/**
 * @return {proto.UniversalMessage.RoutableMessage.SubSigdataCase}
 */
proto.UniversalMessage.RoutableMessage.prototype.getSubSigdataCase = function() {
  return /** @type {proto.UniversalMessage.RoutableMessage.SubSigdataCase} */(jspb.Message.computeOneofCase(this, proto.UniversalMessage.RoutableMessage.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UniversalMessage.RoutableMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.UniversalMessage.RoutableMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UniversalMessage.RoutableMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UniversalMessage.RoutableMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    toDestination: (f = msg.getToDestination()) && proto.UniversalMessage.Destination.toObject(includeInstance, f),
    fromDestination: (f = msg.getFromDestination()) && proto.UniversalMessage.Destination.toObject(includeInstance, f),
    protobufMessageAsBytes: msg.getProtobufMessageAsBytes_asB64(),
    sessionInfoRequest: (f = msg.getSessionInfoRequest()) && proto.UniversalMessage.SessionInfoRequest.toObject(includeInstance, f),
    sessionInfo: msg.getSessionInfo_asB64(),
    signatureData: (f = msg.getSignatureData()) && signatures_pb.SignatureData.toObject(includeInstance, f),
    signedmessagestatus: (f = msg.getSignedmessagestatus()) && proto.UniversalMessage.MessageStatus.toObject(includeInstance, f),
    requestUuid: msg.getRequestUuid_asB64(),
    uuid: msg.getUuid_asB64(),
    flags: jspb.Message.getFieldWithDefault(msg, 52, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UniversalMessage.RoutableMessage}
 */
proto.UniversalMessage.RoutableMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UniversalMessage.RoutableMessage;
  return proto.UniversalMessage.RoutableMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UniversalMessage.RoutableMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UniversalMessage.RoutableMessage}
 */
proto.UniversalMessage.RoutableMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = new proto.UniversalMessage.Destination;
      reader.readMessage(value,proto.UniversalMessage.Destination.deserializeBinaryFromReader);
      msg.setToDestination(value);
      break;
    case 7:
      var value = new proto.UniversalMessage.Destination;
      reader.readMessage(value,proto.UniversalMessage.Destination.deserializeBinaryFromReader);
      msg.setFromDestination(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProtobufMessageAsBytes(value);
      break;
    case 14:
      var value = new proto.UniversalMessage.SessionInfoRequest;
      reader.readMessage(value,proto.UniversalMessage.SessionInfoRequest.deserializeBinaryFromReader);
      msg.setSessionInfoRequest(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSessionInfo(value);
      break;
    case 13:
      var value = new signatures_pb.SignatureData;
      reader.readMessage(value,signatures_pb.SignatureData.deserializeBinaryFromReader);
      msg.setSignatureData(value);
      break;
    case 12:
      var value = new proto.UniversalMessage.MessageStatus;
      reader.readMessage(value,proto.UniversalMessage.MessageStatus.deserializeBinaryFromReader);
      msg.setSignedmessagestatus(value);
      break;
    case 50:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestUuid(value);
      break;
    case 51:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUuid(value);
      break;
    case 52:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UniversalMessage.RoutableMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UniversalMessage.RoutableMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UniversalMessage.RoutableMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UniversalMessage.RoutableMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToDestination();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.UniversalMessage.Destination.serializeBinaryToWriter
    );
  }
  f = message.getFromDestination();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.UniversalMessage.Destination.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getSessionInfoRequest();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.UniversalMessage.SessionInfoRequest.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeBytes(
      15,
      f
    );
  }
  f = message.getSignatureData();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      signatures_pb.SignatureData.serializeBinaryToWriter
    );
  }
  f = message.getSignedmessagestatus();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.UniversalMessage.MessageStatus.serializeBinaryToWriter
    );
  }
  f = message.getRequestUuid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      50,
      f
    );
  }
  f = message.getUuid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      51,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeUint32(
      52,
      f
    );
  }
};


/**
 * optional Destination to_destination = 6;
 * @return {?proto.UniversalMessage.Destination}
 */
proto.UniversalMessage.RoutableMessage.prototype.getToDestination = function() {
  return /** @type{?proto.UniversalMessage.Destination} */ (
    jspb.Message.getWrapperField(this, proto.UniversalMessage.Destination, 6));
};


/**
 * @param {?proto.UniversalMessage.Destination|undefined} value
 * @return {!proto.UniversalMessage.RoutableMessage} returns this
*/
proto.UniversalMessage.RoutableMessage.prototype.setToDestination = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UniversalMessage.RoutableMessage} returns this
 */
proto.UniversalMessage.RoutableMessage.prototype.clearToDestination = function() {
  return this.setToDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UniversalMessage.RoutableMessage.prototype.hasToDestination = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Destination from_destination = 7;
 * @return {?proto.UniversalMessage.Destination}
 */
proto.UniversalMessage.RoutableMessage.prototype.getFromDestination = function() {
  return /** @type{?proto.UniversalMessage.Destination} */ (
    jspb.Message.getWrapperField(this, proto.UniversalMessage.Destination, 7));
};


/**
 * @param {?proto.UniversalMessage.Destination|undefined} value
 * @return {!proto.UniversalMessage.RoutableMessage} returns this
*/
proto.UniversalMessage.RoutableMessage.prototype.setFromDestination = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UniversalMessage.RoutableMessage} returns this
 */
proto.UniversalMessage.RoutableMessage.prototype.clearFromDestination = function() {
  return this.setFromDestination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UniversalMessage.RoutableMessage.prototype.hasFromDestination = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes protobuf_message_as_bytes = 10;
 * @return {!(string|Uint8Array)}
 */
proto.UniversalMessage.RoutableMessage.prototype.getProtobufMessageAsBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes protobuf_message_as_bytes = 10;
 * This is a type-conversion wrapper around `getProtobufMessageAsBytes()`
 * @return {string}
 */
proto.UniversalMessage.RoutableMessage.prototype.getProtobufMessageAsBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProtobufMessageAsBytes()));
};


/**
 * optional bytes protobuf_message_as_bytes = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProtobufMessageAsBytes()`
 * @return {!Uint8Array}
 */
proto.UniversalMessage.RoutableMessage.prototype.getProtobufMessageAsBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProtobufMessageAsBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.UniversalMessage.RoutableMessage} returns this
 */
proto.UniversalMessage.RoutableMessage.prototype.setProtobufMessageAsBytes = function(value) {
  return jspb.Message.setOneofField(this, 10, proto.UniversalMessage.RoutableMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.UniversalMessage.RoutableMessage} returns this
 */
proto.UniversalMessage.RoutableMessage.prototype.clearProtobufMessageAsBytes = function() {
  return jspb.Message.setOneofField(this, 10, proto.UniversalMessage.RoutableMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UniversalMessage.RoutableMessage.prototype.hasProtobufMessageAsBytes = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional SessionInfoRequest session_info_request = 14;
 * @return {?proto.UniversalMessage.SessionInfoRequest}
 */
proto.UniversalMessage.RoutableMessage.prototype.getSessionInfoRequest = function() {
  return /** @type{?proto.UniversalMessage.SessionInfoRequest} */ (
    jspb.Message.getWrapperField(this, proto.UniversalMessage.SessionInfoRequest, 14));
};


/**
 * @param {?proto.UniversalMessage.SessionInfoRequest|undefined} value
 * @return {!proto.UniversalMessage.RoutableMessage} returns this
*/
proto.UniversalMessage.RoutableMessage.prototype.setSessionInfoRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.UniversalMessage.RoutableMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UniversalMessage.RoutableMessage} returns this
 */
proto.UniversalMessage.RoutableMessage.prototype.clearSessionInfoRequest = function() {
  return this.setSessionInfoRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UniversalMessage.RoutableMessage.prototype.hasSessionInfoRequest = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bytes session_info = 15;
 * @return {!(string|Uint8Array)}
 */
proto.UniversalMessage.RoutableMessage.prototype.getSessionInfo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes session_info = 15;
 * This is a type-conversion wrapper around `getSessionInfo()`
 * @return {string}
 */
proto.UniversalMessage.RoutableMessage.prototype.getSessionInfo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSessionInfo()));
};


/**
 * optional bytes session_info = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionInfo()`
 * @return {!Uint8Array}
 */
proto.UniversalMessage.RoutableMessage.prototype.getSessionInfo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSessionInfo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.UniversalMessage.RoutableMessage} returns this
 */
proto.UniversalMessage.RoutableMessage.prototype.setSessionInfo = function(value) {
  return jspb.Message.setOneofField(this, 15, proto.UniversalMessage.RoutableMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.UniversalMessage.RoutableMessage} returns this
 */
proto.UniversalMessage.RoutableMessage.prototype.clearSessionInfo = function() {
  return jspb.Message.setOneofField(this, 15, proto.UniversalMessage.RoutableMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UniversalMessage.RoutableMessage.prototype.hasSessionInfo = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional Signatures.SignatureData signature_data = 13;
 * @return {?proto.Signatures.SignatureData}
 */
proto.UniversalMessage.RoutableMessage.prototype.getSignatureData = function() {
  return /** @type{?proto.Signatures.SignatureData} */ (
    jspb.Message.getWrapperField(this, signatures_pb.SignatureData, 13));
};


/**
 * @param {?proto.Signatures.SignatureData|undefined} value
 * @return {!proto.UniversalMessage.RoutableMessage} returns this
*/
proto.UniversalMessage.RoutableMessage.prototype.setSignatureData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.UniversalMessage.RoutableMessage.oneofGroups_[1], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UniversalMessage.RoutableMessage} returns this
 */
proto.UniversalMessage.RoutableMessage.prototype.clearSignatureData = function() {
  return this.setSignatureData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UniversalMessage.RoutableMessage.prototype.hasSignatureData = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional MessageStatus signedMessageStatus = 12;
 * @return {?proto.UniversalMessage.MessageStatus}
 */
proto.UniversalMessage.RoutableMessage.prototype.getSignedmessagestatus = function() {
  return /** @type{?proto.UniversalMessage.MessageStatus} */ (
    jspb.Message.getWrapperField(this, proto.UniversalMessage.MessageStatus, 12));
};


/**
 * @param {?proto.UniversalMessage.MessageStatus|undefined} value
 * @return {!proto.UniversalMessage.RoutableMessage} returns this
*/
proto.UniversalMessage.RoutableMessage.prototype.setSignedmessagestatus = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.UniversalMessage.RoutableMessage} returns this
 */
proto.UniversalMessage.RoutableMessage.prototype.clearSignedmessagestatus = function() {
  return this.setSignedmessagestatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.UniversalMessage.RoutableMessage.prototype.hasSignedmessagestatus = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bytes request_uuid = 50;
 * @return {!(string|Uint8Array)}
 */
proto.UniversalMessage.RoutableMessage.prototype.getRequestUuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 50, ""));
};


/**
 * optional bytes request_uuid = 50;
 * This is a type-conversion wrapper around `getRequestUuid()`
 * @return {string}
 */
proto.UniversalMessage.RoutableMessage.prototype.getRequestUuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestUuid()));
};


/**
 * optional bytes request_uuid = 50;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestUuid()`
 * @return {!Uint8Array}
 */
proto.UniversalMessage.RoutableMessage.prototype.getRequestUuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestUuid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.UniversalMessage.RoutableMessage} returns this
 */
proto.UniversalMessage.RoutableMessage.prototype.setRequestUuid = function(value) {
  return jspb.Message.setProto3BytesField(this, 50, value);
};


/**
 * optional bytes uuid = 51;
 * @return {!(string|Uint8Array)}
 */
proto.UniversalMessage.RoutableMessage.prototype.getUuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 51, ""));
};


/**
 * optional bytes uuid = 51;
 * This is a type-conversion wrapper around `getUuid()`
 * @return {string}
 */
proto.UniversalMessage.RoutableMessage.prototype.getUuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUuid()));
};


/**
 * optional bytes uuid = 51;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUuid()`
 * @return {!Uint8Array}
 */
proto.UniversalMessage.RoutableMessage.prototype.getUuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUuid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.UniversalMessage.RoutableMessage} returns this
 */
proto.UniversalMessage.RoutableMessage.prototype.setUuid = function(value) {
  return jspb.Message.setProto3BytesField(this, 51, value);
};


/**
 * optional uint32 flags = 52;
 * @return {number}
 */
proto.UniversalMessage.RoutableMessage.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 52, 0));
};


/**
 * @param {number} value
 * @return {!proto.UniversalMessage.RoutableMessage} returns this
 */
proto.UniversalMessage.RoutableMessage.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 52, value);
};


/**
 * @enum {number}
 */
proto.UniversalMessage.Domain = {
  DOMAIN_BROADCAST: 0,
  DOMAIN_VEHICLE_SECURITY: 2,
  DOMAIN_INFOTAINMENT: 3
};

/**
 * @enum {number}
 */
proto.UniversalMessage.OperationStatus_E = {
  OPERATIONSTATUS_OK: 0,
  OPERATIONSTATUS_WAIT: 1,
  OPERATIONSTATUS_ERROR: 2
};

/**
 * @enum {number}
 */
proto.UniversalMessage.MessageFault_E = {
  MESSAGEFAULT_ERROR_NONE: 0,
  MESSAGEFAULT_ERROR_BUSY: 1,
  MESSAGEFAULT_ERROR_TIMEOUT: 2,
  MESSAGEFAULT_ERROR_UNKNOWN_KEY_ID: 3,
  MESSAGEFAULT_ERROR_INACTIVE_KEY: 4,
  MESSAGEFAULT_ERROR_INVALID_SIGNATURE: 5,
  MESSAGEFAULT_ERROR_INVALID_TOKEN_OR_COUNTER: 6,
  MESSAGEFAULT_ERROR_INSUFFICIENT_PRIVILEGES: 7,
  MESSAGEFAULT_ERROR_INVALID_DOMAINS: 8,
  MESSAGEFAULT_ERROR_INVALID_COMMAND: 9,
  MESSAGEFAULT_ERROR_DECODING: 10,
  MESSAGEFAULT_ERROR_INTERNAL: 11,
  MESSAGEFAULT_ERROR_WRONG_PERSONALIZATION: 12,
  MESSAGEFAULT_ERROR_BAD_PARAMETER: 13,
  MESSAGEFAULT_ERROR_KEYCHAIN_IS_FULL: 14,
  MESSAGEFAULT_ERROR_INCORRECT_EPOCH: 15,
  MESSAGEFAULT_ERROR_IV_INCORRECT_LENGTH: 16,
  MESSAGEFAULT_ERROR_TIME_EXPIRED: 17,
  MESSAGEFAULT_ERROR_NOT_PROVISIONED_WITH_IDENTITY: 18,
  MESSAGEFAULT_ERROR_COULD_NOT_HASH_METADATA: 19,
  MESSAGEFAULT_ERROR_TIME_TO_LIVE_TOO_LONG: 20,
  MESSAGEFAULT_ERROR_REMOTE_ACCESS_DISABLED: 21,
  MESSAGEFAULT_ERROR_REMOTE_SERVICE_ACCESS_DISABLED: 22,
  MESSAGEFAULT_ERROR_COMMAND_REQUIRES_ACCOUNT_CREDENTIALS: 23
};

/**
 * @enum {number}
 */
proto.UniversalMessage.Flags = {
  FLAG_USER_COMMAND: 0
};

goog.object.extend(exports, proto.UniversalMessage);
