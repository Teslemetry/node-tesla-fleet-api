// source: vcsec.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var keys_pb = require('./keys_pb.js');
goog.object.extend(proto, keys_pb);
var errors_pb = require('./errors_pb.js');
goog.object.extend(proto, errors_pb);
goog.exportSymbol('proto.VCSEC.ClosureMoveRequest', null, global);
goog.exportSymbol('proto.VCSEC.ClosureMoveType_E', null, global);
goog.exportSymbol('proto.VCSEC.ClosureState_E', null, global);
goog.exportSymbol('proto.VCSEC.ClosureStatuses', null, global);
goog.exportSymbol('proto.VCSEC.CommandStatus', null, global);
goog.exportSymbol('proto.VCSEC.CommandStatus.SubMessageCase', null, global);
goog.exportSymbol('proto.VCSEC.DetailedClosureStatus', null, global);
goog.exportSymbol('proto.VCSEC.FromVCSECMessage', null, global);
goog.exportSymbol('proto.VCSEC.FromVCSECMessage.SubMessageCase', null, global);
goog.exportSymbol('proto.VCSEC.InformationRequest', null, global);
goog.exportSymbol('proto.VCSEC.InformationRequest.KeyCase', null, global);
goog.exportSymbol('proto.VCSEC.InformationRequestType', null, global);
goog.exportSymbol('proto.VCSEC.KeyFormFactor', null, global);
goog.exportSymbol('proto.VCSEC.KeyIdentifier', null, global);
goog.exportSymbol('proto.VCSEC.KeyMetadata', null, global);
goog.exportSymbol('proto.VCSEC.OperationStatus_E', null, global);
goog.exportSymbol('proto.VCSEC.PermissionChange', null, global);
goog.exportSymbol('proto.VCSEC.PublicKey', null, global);
goog.exportSymbol('proto.VCSEC.RKEAction_E', null, global);
goog.exportSymbol('proto.VCSEC.ReplaceKey', null, global);
goog.exportSymbol('proto.VCSEC.ReplaceKey.KeytoreplaceCase', null, global);
goog.exportSymbol('proto.VCSEC.SignatureType', null, global);
goog.exportSymbol('proto.VCSEC.SignedMessage', null, global);
goog.exportSymbol('proto.VCSEC.SignedMessage_information_E', null, global);
goog.exportSymbol('proto.VCSEC.SignedMessage_status', null, global);
goog.exportSymbol('proto.VCSEC.ToVCSECMessage', null, global);
goog.exportSymbol('proto.VCSEC.UnsignedMessage', null, global);
goog.exportSymbol('proto.VCSEC.UnsignedMessage.SubMessageCase', null, global);
goog.exportSymbol('proto.VCSEC.UserPresence_E', null, global);
goog.exportSymbol('proto.VCSEC.VehicleLockState_E', null, global);
goog.exportSymbol('proto.VCSEC.VehicleSleepStatus_E', null, global);
goog.exportSymbol('proto.VCSEC.VehicleStatus', null, global);
goog.exportSymbol('proto.VCSEC.WhitelistEntryInfo', null, global);
goog.exportSymbol('proto.VCSEC.WhitelistInfo', null, global);
goog.exportSymbol('proto.VCSEC.WhitelistOperation', null, global);
goog.exportSymbol('proto.VCSEC.WhitelistOperation.SubMessageCase', null, global);
goog.exportSymbol('proto.VCSEC.WhitelistOperation_information_E', null, global);
goog.exportSymbol('proto.VCSEC.WhitelistOperation_status', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.SignedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VCSEC.SignedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.SignedMessage.displayName = 'proto.VCSEC.SignedMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.ToVCSECMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VCSEC.ToVCSECMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.ToVCSECMessage.displayName = 'proto.VCSEC.ToVCSECMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.KeyIdentifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VCSEC.KeyIdentifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.KeyIdentifier.displayName = 'proto.VCSEC.KeyIdentifier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.KeyMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VCSEC.KeyMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.KeyMetadata.displayName = 'proto.VCSEC.KeyMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.PublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VCSEC.PublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.PublicKey.displayName = 'proto.VCSEC.PublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.WhitelistInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VCSEC.WhitelistInfo.repeatedFields_, null);
};
goog.inherits(proto.VCSEC.WhitelistInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.WhitelistInfo.displayName = 'proto.VCSEC.WhitelistInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.WhitelistEntryInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VCSEC.WhitelistEntryInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.WhitelistEntryInfo.displayName = 'proto.VCSEC.WhitelistEntryInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.InformationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.VCSEC.InformationRequest.oneofGroups_);
};
goog.inherits(proto.VCSEC.InformationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.InformationRequest.displayName = 'proto.VCSEC.InformationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.ClosureMoveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VCSEC.ClosureMoveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.ClosureMoveRequest.displayName = 'proto.VCSEC.ClosureMoveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.PermissionChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VCSEC.PermissionChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.PermissionChange.displayName = 'proto.VCSEC.PermissionChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.ReplaceKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.VCSEC.ReplaceKey.oneofGroups_);
};
goog.inherits(proto.VCSEC.ReplaceKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.ReplaceKey.displayName = 'proto.VCSEC.ReplaceKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.WhitelistOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.VCSEC.WhitelistOperation.oneofGroups_);
};
goog.inherits(proto.VCSEC.WhitelistOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.WhitelistOperation.displayName = 'proto.VCSEC.WhitelistOperation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.WhitelistOperation_status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VCSEC.WhitelistOperation_status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.WhitelistOperation_status.displayName = 'proto.VCSEC.WhitelistOperation_status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.SignedMessage_status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VCSEC.SignedMessage_status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.SignedMessage_status.displayName = 'proto.VCSEC.SignedMessage_status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.CommandStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.VCSEC.CommandStatus.oneofGroups_);
};
goog.inherits(proto.VCSEC.CommandStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.CommandStatus.displayName = 'proto.VCSEC.CommandStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.UnsignedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.VCSEC.UnsignedMessage.oneofGroups_);
};
goog.inherits(proto.VCSEC.UnsignedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.UnsignedMessage.displayName = 'proto.VCSEC.UnsignedMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.ClosureStatuses = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VCSEC.ClosureStatuses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.ClosureStatuses.displayName = 'proto.VCSEC.ClosureStatuses';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.DetailedClosureStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VCSEC.DetailedClosureStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.DetailedClosureStatus.displayName = 'proto.VCSEC.DetailedClosureStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.VehicleStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VCSEC.VehicleStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.VehicleStatus.displayName = 'proto.VCSEC.VehicleStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VCSEC.FromVCSECMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.VCSEC.FromVCSECMessage.oneofGroups_);
};
goog.inherits(proto.VCSEC.FromVCSECMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VCSEC.FromVCSECMessage.displayName = 'proto.VCSEC.FromVCSECMessage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.SignedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.SignedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.SignedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.SignedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    protobufmessageasbytes: msg.getProtobufmessageasbytes_asB64(),
    signaturetype: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.SignedMessage}
 */
proto.VCSEC.SignedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.SignedMessage;
  return proto.VCSEC.SignedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.SignedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.SignedMessage}
 */
proto.VCSEC.SignedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProtobufmessageasbytes(value);
      break;
    case 3:
      var value = /** @type {!proto.VCSEC.SignatureType} */ (reader.readEnum());
      msg.setSignaturetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.SignedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.SignedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.SignedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.SignedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProtobufmessageasbytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSignaturetype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional bytes protobufMessageAsBytes = 2;
 * @return {!(string|Uint8Array)}
 */
proto.VCSEC.SignedMessage.prototype.getProtobufmessageasbytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes protobufMessageAsBytes = 2;
 * This is a type-conversion wrapper around `getProtobufmessageasbytes()`
 * @return {string}
 */
proto.VCSEC.SignedMessage.prototype.getProtobufmessageasbytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProtobufmessageasbytes()));
};


/**
 * optional bytes protobufMessageAsBytes = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProtobufmessageasbytes()`
 * @return {!Uint8Array}
 */
proto.VCSEC.SignedMessage.prototype.getProtobufmessageasbytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProtobufmessageasbytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.VCSEC.SignedMessage} returns this
 */
proto.VCSEC.SignedMessage.prototype.setProtobufmessageasbytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional SignatureType signatureType = 3;
 * @return {!proto.VCSEC.SignatureType}
 */
proto.VCSEC.SignedMessage.prototype.getSignaturetype = function() {
  return /** @type {!proto.VCSEC.SignatureType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.VCSEC.SignatureType} value
 * @return {!proto.VCSEC.SignedMessage} returns this
 */
proto.VCSEC.SignedMessage.prototype.setSignaturetype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.ToVCSECMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.ToVCSECMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.ToVCSECMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.ToVCSECMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    signedmessage: (f = msg.getSignedmessage()) && proto.VCSEC.SignedMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.ToVCSECMessage}
 */
proto.VCSEC.ToVCSECMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.ToVCSECMessage;
  return proto.VCSEC.ToVCSECMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.ToVCSECMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.ToVCSECMessage}
 */
proto.VCSEC.ToVCSECMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VCSEC.SignedMessage;
      reader.readMessage(value,proto.VCSEC.SignedMessage.deserializeBinaryFromReader);
      msg.setSignedmessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.ToVCSECMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.ToVCSECMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.ToVCSECMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.ToVCSECMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignedmessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VCSEC.SignedMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional SignedMessage signedMessage = 1;
 * @return {?proto.VCSEC.SignedMessage}
 */
proto.VCSEC.ToVCSECMessage.prototype.getSignedmessage = function() {
  return /** @type{?proto.VCSEC.SignedMessage} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.SignedMessage, 1));
};


/**
 * @param {?proto.VCSEC.SignedMessage|undefined} value
 * @return {!proto.VCSEC.ToVCSECMessage} returns this
*/
proto.VCSEC.ToVCSECMessage.prototype.setSignedmessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.ToVCSECMessage} returns this
 */
proto.VCSEC.ToVCSECMessage.prototype.clearSignedmessage = function() {
  return this.setSignedmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.ToVCSECMessage.prototype.hasSignedmessage = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.KeyIdentifier.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.KeyIdentifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.KeyIdentifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.KeyIdentifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    publickeysha1: msg.getPublickeysha1_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.KeyIdentifier}
 */
proto.VCSEC.KeyIdentifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.KeyIdentifier;
  return proto.VCSEC.KeyIdentifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.KeyIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.KeyIdentifier}
 */
proto.VCSEC.KeyIdentifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickeysha1(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.KeyIdentifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.KeyIdentifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.KeyIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.KeyIdentifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublickeysha1_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes publicKeySHA1 = 1;
 * @return {!(string|Uint8Array)}
 */
proto.VCSEC.KeyIdentifier.prototype.getPublickeysha1 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes publicKeySHA1 = 1;
 * This is a type-conversion wrapper around `getPublickeysha1()`
 * @return {string}
 */
proto.VCSEC.KeyIdentifier.prototype.getPublickeysha1_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublickeysha1()));
};


/**
 * optional bytes publicKeySHA1 = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublickeysha1()`
 * @return {!Uint8Array}
 */
proto.VCSEC.KeyIdentifier.prototype.getPublickeysha1_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublickeysha1()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.VCSEC.KeyIdentifier} returns this
 */
proto.VCSEC.KeyIdentifier.prototype.setPublickeysha1 = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.KeyMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.KeyMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.KeyMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.KeyMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyformfactor: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.KeyMetadata}
 */
proto.VCSEC.KeyMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.KeyMetadata;
  return proto.VCSEC.KeyMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.KeyMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.KeyMetadata}
 */
proto.VCSEC.KeyMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.VCSEC.KeyFormFactor} */ (reader.readEnum());
      msg.setKeyformfactor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.KeyMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.KeyMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.KeyMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.KeyMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyformfactor();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional KeyFormFactor keyFormFactor = 1;
 * @return {!proto.VCSEC.KeyFormFactor}
 */
proto.VCSEC.KeyMetadata.prototype.getKeyformfactor = function() {
  return /** @type {!proto.VCSEC.KeyFormFactor} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.VCSEC.KeyFormFactor} value
 * @return {!proto.VCSEC.KeyMetadata} returns this
 */
proto.VCSEC.KeyMetadata.prototype.setKeyformfactor = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.PublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.PublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.PublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.PublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    publickeyraw: msg.getPublickeyraw_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.PublicKey}
 */
proto.VCSEC.PublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.PublicKey;
  return proto.VCSEC.PublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.PublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.PublicKey}
 */
proto.VCSEC.PublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickeyraw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.PublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.PublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.PublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.PublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublickeyraw_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes PublicKeyRaw = 1;
 * @return {!(string|Uint8Array)}
 */
proto.VCSEC.PublicKey.prototype.getPublickeyraw = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes PublicKeyRaw = 1;
 * This is a type-conversion wrapper around `getPublickeyraw()`
 * @return {string}
 */
proto.VCSEC.PublicKey.prototype.getPublickeyraw_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublickeyraw()));
};


/**
 * optional bytes PublicKeyRaw = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublickeyraw()`
 * @return {!Uint8Array}
 */
proto.VCSEC.PublicKey.prototype.getPublickeyraw_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublickeyraw()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.VCSEC.PublicKey} returns this
 */
proto.VCSEC.PublicKey.prototype.setPublickeyraw = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VCSEC.WhitelistInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.WhitelistInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.WhitelistInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.WhitelistInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.WhitelistInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    numberofentries: jspb.Message.getFieldWithDefault(msg, 1, 0),
    whitelistentriesList: jspb.Message.toObjectList(msg.getWhitelistentriesList(),
    proto.VCSEC.KeyIdentifier.toObject, includeInstance),
    slotmask: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.WhitelistInfo}
 */
proto.VCSEC.WhitelistInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.WhitelistInfo;
  return proto.VCSEC.WhitelistInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.WhitelistInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.WhitelistInfo}
 */
proto.VCSEC.WhitelistInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumberofentries(value);
      break;
    case 2:
      var value = new proto.VCSEC.KeyIdentifier;
      reader.readMessage(value,proto.VCSEC.KeyIdentifier.deserializeBinaryFromReader);
      msg.addWhitelistentries(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSlotmask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.WhitelistInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.WhitelistInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.WhitelistInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.WhitelistInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumberofentries();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getWhitelistentriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.VCSEC.KeyIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getSlotmask();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 numberOfEntries = 1;
 * @return {number}
 */
proto.VCSEC.WhitelistInfo.prototype.getNumberofentries = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.VCSEC.WhitelistInfo} returns this
 */
proto.VCSEC.WhitelistInfo.prototype.setNumberofentries = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated KeyIdentifier whitelistEntries = 2;
 * @return {!Array<!proto.VCSEC.KeyIdentifier>}
 */
proto.VCSEC.WhitelistInfo.prototype.getWhitelistentriesList = function() {
  return /** @type{!Array<!proto.VCSEC.KeyIdentifier>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VCSEC.KeyIdentifier, 2));
};


/**
 * @param {!Array<!proto.VCSEC.KeyIdentifier>} value
 * @return {!proto.VCSEC.WhitelistInfo} returns this
*/
proto.VCSEC.WhitelistInfo.prototype.setWhitelistentriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.VCSEC.KeyIdentifier=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VCSEC.KeyIdentifier}
 */
proto.VCSEC.WhitelistInfo.prototype.addWhitelistentries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.VCSEC.KeyIdentifier, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VCSEC.WhitelistInfo} returns this
 */
proto.VCSEC.WhitelistInfo.prototype.clearWhitelistentriesList = function() {
  return this.setWhitelistentriesList([]);
};


/**
 * optional uint32 slotMask = 3;
 * @return {number}
 */
proto.VCSEC.WhitelistInfo.prototype.getSlotmask = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.VCSEC.WhitelistInfo} returns this
 */
proto.VCSEC.WhitelistInfo.prototype.setSlotmask = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.WhitelistEntryInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.WhitelistEntryInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.WhitelistEntryInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.WhitelistEntryInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyid: (f = msg.getKeyid()) && proto.VCSEC.KeyIdentifier.toObject(includeInstance, f),
    publickey: (f = msg.getPublickey()) && proto.VCSEC.PublicKey.toObject(includeInstance, f),
    metadataforkey: (f = msg.getMetadataforkey()) && proto.VCSEC.KeyMetadata.toObject(includeInstance, f),
    slot: jspb.Message.getFieldWithDefault(msg, 6, 0),
    keyrole: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.WhitelistEntryInfo}
 */
proto.VCSEC.WhitelistEntryInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.WhitelistEntryInfo;
  return proto.VCSEC.WhitelistEntryInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.WhitelistEntryInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.WhitelistEntryInfo}
 */
proto.VCSEC.WhitelistEntryInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VCSEC.KeyIdentifier;
      reader.readMessage(value,proto.VCSEC.KeyIdentifier.deserializeBinaryFromReader);
      msg.setKeyid(value);
      break;
    case 2:
      var value = new proto.VCSEC.PublicKey;
      reader.readMessage(value,proto.VCSEC.PublicKey.deserializeBinaryFromReader);
      msg.setPublickey(value);
      break;
    case 4:
      var value = new proto.VCSEC.KeyMetadata;
      reader.readMessage(value,proto.VCSEC.KeyMetadata.deserializeBinaryFromReader);
      msg.setMetadataforkey(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSlot(value);
      break;
    case 7:
      var value = /** @type {!proto.Keys.Role} */ (reader.readEnum());
      msg.setKeyrole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.WhitelistEntryInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.WhitelistEntryInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.WhitelistEntryInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.WhitelistEntryInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VCSEC.KeyIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getPublickey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.VCSEC.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getMetadataforkey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.VCSEC.KeyMetadata.serializeBinaryToWriter
    );
  }
  f = message.getSlot();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getKeyrole();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * optional KeyIdentifier keyId = 1;
 * @return {?proto.VCSEC.KeyIdentifier}
 */
proto.VCSEC.WhitelistEntryInfo.prototype.getKeyid = function() {
  return /** @type{?proto.VCSEC.KeyIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.KeyIdentifier, 1));
};


/**
 * @param {?proto.VCSEC.KeyIdentifier|undefined} value
 * @return {!proto.VCSEC.WhitelistEntryInfo} returns this
*/
proto.VCSEC.WhitelistEntryInfo.prototype.setKeyid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.WhitelistEntryInfo} returns this
 */
proto.VCSEC.WhitelistEntryInfo.prototype.clearKeyid = function() {
  return this.setKeyid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.WhitelistEntryInfo.prototype.hasKeyid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PublicKey publicKey = 2;
 * @return {?proto.VCSEC.PublicKey}
 */
proto.VCSEC.WhitelistEntryInfo.prototype.getPublickey = function() {
  return /** @type{?proto.VCSEC.PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.PublicKey, 2));
};


/**
 * @param {?proto.VCSEC.PublicKey|undefined} value
 * @return {!proto.VCSEC.WhitelistEntryInfo} returns this
*/
proto.VCSEC.WhitelistEntryInfo.prototype.setPublickey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.WhitelistEntryInfo} returns this
 */
proto.VCSEC.WhitelistEntryInfo.prototype.clearPublickey = function() {
  return this.setPublickey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.WhitelistEntryInfo.prototype.hasPublickey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional KeyMetadata metadataForKey = 4;
 * @return {?proto.VCSEC.KeyMetadata}
 */
proto.VCSEC.WhitelistEntryInfo.prototype.getMetadataforkey = function() {
  return /** @type{?proto.VCSEC.KeyMetadata} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.KeyMetadata, 4));
};


/**
 * @param {?proto.VCSEC.KeyMetadata|undefined} value
 * @return {!proto.VCSEC.WhitelistEntryInfo} returns this
*/
proto.VCSEC.WhitelistEntryInfo.prototype.setMetadataforkey = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.WhitelistEntryInfo} returns this
 */
proto.VCSEC.WhitelistEntryInfo.prototype.clearMetadataforkey = function() {
  return this.setMetadataforkey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.WhitelistEntryInfo.prototype.hasMetadataforkey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 slot = 6;
 * @return {number}
 */
proto.VCSEC.WhitelistEntryInfo.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.VCSEC.WhitelistEntryInfo} returns this
 */
proto.VCSEC.WhitelistEntryInfo.prototype.setSlot = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional Keys.Role keyRole = 7;
 * @return {!proto.Keys.Role}
 */
proto.VCSEC.WhitelistEntryInfo.prototype.getKeyrole = function() {
  return /** @type {!proto.Keys.Role} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.Keys.Role} value
 * @return {!proto.VCSEC.WhitelistEntryInfo} returns this
 */
proto.VCSEC.WhitelistEntryInfo.prototype.setKeyrole = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.VCSEC.InformationRequest.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.VCSEC.InformationRequest.KeyCase = {
  KEY_NOT_SET: 0,
  KEYID: 2,
  PUBLICKEY: 3,
  SLOT: 4
};

/**
 * @return {proto.VCSEC.InformationRequest.KeyCase}
 */
proto.VCSEC.InformationRequest.prototype.getKeyCase = function() {
  return /** @type {proto.VCSEC.InformationRequest.KeyCase} */(jspb.Message.computeOneofCase(this, proto.VCSEC.InformationRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.InformationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.InformationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.InformationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.InformationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    informationrequesttype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    keyid: (f = msg.getKeyid()) && proto.VCSEC.KeyIdentifier.toObject(includeInstance, f),
    publickey: msg.getPublickey_asB64(),
    slot: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.InformationRequest}
 */
proto.VCSEC.InformationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.InformationRequest;
  return proto.VCSEC.InformationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.InformationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.InformationRequest}
 */
proto.VCSEC.InformationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.VCSEC.InformationRequestType} */ (reader.readEnum());
      msg.setInformationrequesttype(value);
      break;
    case 2:
      var value = new proto.VCSEC.KeyIdentifier;
      reader.readMessage(value,proto.VCSEC.KeyIdentifier.deserializeBinaryFromReader);
      msg.setKeyid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSlot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.InformationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.InformationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.InformationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.InformationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInformationrequesttype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getKeyid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.VCSEC.KeyIdentifier.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional InformationRequestType informationRequestType = 1;
 * @return {!proto.VCSEC.InformationRequestType}
 */
proto.VCSEC.InformationRequest.prototype.getInformationrequesttype = function() {
  return /** @type {!proto.VCSEC.InformationRequestType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.VCSEC.InformationRequestType} value
 * @return {!proto.VCSEC.InformationRequest} returns this
 */
proto.VCSEC.InformationRequest.prototype.setInformationrequesttype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional KeyIdentifier keyId = 2;
 * @return {?proto.VCSEC.KeyIdentifier}
 */
proto.VCSEC.InformationRequest.prototype.getKeyid = function() {
  return /** @type{?proto.VCSEC.KeyIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.KeyIdentifier, 2));
};


/**
 * @param {?proto.VCSEC.KeyIdentifier|undefined} value
 * @return {!proto.VCSEC.InformationRequest} returns this
*/
proto.VCSEC.InformationRequest.prototype.setKeyid = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.VCSEC.InformationRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.InformationRequest} returns this
 */
proto.VCSEC.InformationRequest.prototype.clearKeyid = function() {
  return this.setKeyid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.InformationRequest.prototype.hasKeyid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes publicKey = 3;
 * @return {!(string|Uint8Array)}
 */
proto.VCSEC.InformationRequest.prototype.getPublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes publicKey = 3;
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {string}
 */
proto.VCSEC.InformationRequest.prototype.getPublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublickey()));
};


/**
 * optional bytes publicKey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {!Uint8Array}
 */
proto.VCSEC.InformationRequest.prototype.getPublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublickey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.VCSEC.InformationRequest} returns this
 */
proto.VCSEC.InformationRequest.prototype.setPublickey = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.VCSEC.InformationRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.VCSEC.InformationRequest} returns this
 */
proto.VCSEC.InformationRequest.prototype.clearPublickey = function() {
  return jspb.Message.setOneofField(this, 3, proto.VCSEC.InformationRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.InformationRequest.prototype.hasPublickey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 slot = 4;
 * @return {number}
 */
proto.VCSEC.InformationRequest.prototype.getSlot = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.VCSEC.InformationRequest} returns this
 */
proto.VCSEC.InformationRequest.prototype.setSlot = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.VCSEC.InformationRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.VCSEC.InformationRequest} returns this
 */
proto.VCSEC.InformationRequest.prototype.clearSlot = function() {
  return jspb.Message.setOneofField(this, 4, proto.VCSEC.InformationRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.InformationRequest.prototype.hasSlot = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.ClosureMoveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.ClosureMoveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.ClosureMoveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.ClosureMoveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    frontdriverdoor: jspb.Message.getFieldWithDefault(msg, 1, 0),
    frontpassengerdoor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    reardriverdoor: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rearpassengerdoor: jspb.Message.getFieldWithDefault(msg, 4, 0),
    reartrunk: jspb.Message.getFieldWithDefault(msg, 5, 0),
    fronttrunk: jspb.Message.getFieldWithDefault(msg, 6, 0),
    chargeport: jspb.Message.getFieldWithDefault(msg, 7, 0),
    tonneau: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.ClosureMoveRequest}
 */
proto.VCSEC.ClosureMoveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.ClosureMoveRequest;
  return proto.VCSEC.ClosureMoveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.ClosureMoveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.ClosureMoveRequest}
 */
proto.VCSEC.ClosureMoveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.VCSEC.ClosureMoveType_E} */ (reader.readEnum());
      msg.setFrontdriverdoor(value);
      break;
    case 2:
      var value = /** @type {!proto.VCSEC.ClosureMoveType_E} */ (reader.readEnum());
      msg.setFrontpassengerdoor(value);
      break;
    case 3:
      var value = /** @type {!proto.VCSEC.ClosureMoveType_E} */ (reader.readEnum());
      msg.setReardriverdoor(value);
      break;
    case 4:
      var value = /** @type {!proto.VCSEC.ClosureMoveType_E} */ (reader.readEnum());
      msg.setRearpassengerdoor(value);
      break;
    case 5:
      var value = /** @type {!proto.VCSEC.ClosureMoveType_E} */ (reader.readEnum());
      msg.setReartrunk(value);
      break;
    case 6:
      var value = /** @type {!proto.VCSEC.ClosureMoveType_E} */ (reader.readEnum());
      msg.setFronttrunk(value);
      break;
    case 7:
      var value = /** @type {!proto.VCSEC.ClosureMoveType_E} */ (reader.readEnum());
      msg.setChargeport(value);
      break;
    case 8:
      var value = /** @type {!proto.VCSEC.ClosureMoveType_E} */ (reader.readEnum());
      msg.setTonneau(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.ClosureMoveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.ClosureMoveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.ClosureMoveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.ClosureMoveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrontdriverdoor();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFrontpassengerdoor();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getReardriverdoor();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRearpassengerdoor();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getReartrunk();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getFronttrunk();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getChargeport();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getTonneau();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * optional ClosureMoveType_E frontDriverDoor = 1;
 * @return {!proto.VCSEC.ClosureMoveType_E}
 */
proto.VCSEC.ClosureMoveRequest.prototype.getFrontdriverdoor = function() {
  return /** @type {!proto.VCSEC.ClosureMoveType_E} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.VCSEC.ClosureMoveType_E} value
 * @return {!proto.VCSEC.ClosureMoveRequest} returns this
 */
proto.VCSEC.ClosureMoveRequest.prototype.setFrontdriverdoor = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ClosureMoveType_E frontPassengerDoor = 2;
 * @return {!proto.VCSEC.ClosureMoveType_E}
 */
proto.VCSEC.ClosureMoveRequest.prototype.getFrontpassengerdoor = function() {
  return /** @type {!proto.VCSEC.ClosureMoveType_E} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.VCSEC.ClosureMoveType_E} value
 * @return {!proto.VCSEC.ClosureMoveRequest} returns this
 */
proto.VCSEC.ClosureMoveRequest.prototype.setFrontpassengerdoor = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ClosureMoveType_E rearDriverDoor = 3;
 * @return {!proto.VCSEC.ClosureMoveType_E}
 */
proto.VCSEC.ClosureMoveRequest.prototype.getReardriverdoor = function() {
  return /** @type {!proto.VCSEC.ClosureMoveType_E} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.VCSEC.ClosureMoveType_E} value
 * @return {!proto.VCSEC.ClosureMoveRequest} returns this
 */
proto.VCSEC.ClosureMoveRequest.prototype.setReardriverdoor = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional ClosureMoveType_E rearPassengerDoor = 4;
 * @return {!proto.VCSEC.ClosureMoveType_E}
 */
proto.VCSEC.ClosureMoveRequest.prototype.getRearpassengerdoor = function() {
  return /** @type {!proto.VCSEC.ClosureMoveType_E} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.VCSEC.ClosureMoveType_E} value
 * @return {!proto.VCSEC.ClosureMoveRequest} returns this
 */
proto.VCSEC.ClosureMoveRequest.prototype.setRearpassengerdoor = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional ClosureMoveType_E rearTrunk = 5;
 * @return {!proto.VCSEC.ClosureMoveType_E}
 */
proto.VCSEC.ClosureMoveRequest.prototype.getReartrunk = function() {
  return /** @type {!proto.VCSEC.ClosureMoveType_E} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.VCSEC.ClosureMoveType_E} value
 * @return {!proto.VCSEC.ClosureMoveRequest} returns this
 */
proto.VCSEC.ClosureMoveRequest.prototype.setReartrunk = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional ClosureMoveType_E frontTrunk = 6;
 * @return {!proto.VCSEC.ClosureMoveType_E}
 */
proto.VCSEC.ClosureMoveRequest.prototype.getFronttrunk = function() {
  return /** @type {!proto.VCSEC.ClosureMoveType_E} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.VCSEC.ClosureMoveType_E} value
 * @return {!proto.VCSEC.ClosureMoveRequest} returns this
 */
proto.VCSEC.ClosureMoveRequest.prototype.setFronttrunk = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional ClosureMoveType_E chargePort = 7;
 * @return {!proto.VCSEC.ClosureMoveType_E}
 */
proto.VCSEC.ClosureMoveRequest.prototype.getChargeport = function() {
  return /** @type {!proto.VCSEC.ClosureMoveType_E} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.VCSEC.ClosureMoveType_E} value
 * @return {!proto.VCSEC.ClosureMoveRequest} returns this
 */
proto.VCSEC.ClosureMoveRequest.prototype.setChargeport = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional ClosureMoveType_E tonneau = 8;
 * @return {!proto.VCSEC.ClosureMoveType_E}
 */
proto.VCSEC.ClosureMoveRequest.prototype.getTonneau = function() {
  return /** @type {!proto.VCSEC.ClosureMoveType_E} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.VCSEC.ClosureMoveType_E} value
 * @return {!proto.VCSEC.ClosureMoveRequest} returns this
 */
proto.VCSEC.ClosureMoveRequest.prototype.setTonneau = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.PermissionChange.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.PermissionChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.PermissionChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.PermissionChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.VCSEC.PublicKey.toObject(includeInstance, f),
    secondstobeactive: jspb.Message.getFieldWithDefault(msg, 3, 0),
    keyrole: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.PermissionChange}
 */
proto.VCSEC.PermissionChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.PermissionChange;
  return proto.VCSEC.PermissionChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.PermissionChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.PermissionChange}
 */
proto.VCSEC.PermissionChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VCSEC.PublicKey;
      reader.readMessage(value,proto.VCSEC.PublicKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSecondstobeactive(value);
      break;
    case 4:
      var value = /** @type {!proto.Keys.Role} */ (reader.readEnum());
      msg.setKeyrole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.PermissionChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.PermissionChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.PermissionChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.PermissionChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VCSEC.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getSecondstobeactive();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getKeyrole();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional PublicKey key = 1;
 * @return {?proto.VCSEC.PublicKey}
 */
proto.VCSEC.PermissionChange.prototype.getKey = function() {
  return /** @type{?proto.VCSEC.PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.PublicKey, 1));
};


/**
 * @param {?proto.VCSEC.PublicKey|undefined} value
 * @return {!proto.VCSEC.PermissionChange} returns this
*/
proto.VCSEC.PermissionChange.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.PermissionChange} returns this
 */
proto.VCSEC.PermissionChange.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.PermissionChange.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 secondsToBeActive = 3;
 * @return {number}
 */
proto.VCSEC.PermissionChange.prototype.getSecondstobeactive = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.VCSEC.PermissionChange} returns this
 */
proto.VCSEC.PermissionChange.prototype.setSecondstobeactive = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Keys.Role keyRole = 4;
 * @return {!proto.Keys.Role}
 */
proto.VCSEC.PermissionChange.prototype.getKeyrole = function() {
  return /** @type {!proto.Keys.Role} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.Keys.Role} value
 * @return {!proto.VCSEC.PermissionChange} returns this
 */
proto.VCSEC.PermissionChange.prototype.setKeyrole = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.VCSEC.ReplaceKey.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.VCSEC.ReplaceKey.KeytoreplaceCase = {
  KEYTOREPLACE_NOT_SET: 0,
  PUBLICKEYTOREPLACE: 1,
  SLOTTOREPLACE: 2
};

/**
 * @return {proto.VCSEC.ReplaceKey.KeytoreplaceCase}
 */
proto.VCSEC.ReplaceKey.prototype.getKeytoreplaceCase = function() {
  return /** @type {proto.VCSEC.ReplaceKey.KeytoreplaceCase} */(jspb.Message.computeOneofCase(this, proto.VCSEC.ReplaceKey.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.ReplaceKey.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.ReplaceKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.ReplaceKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.ReplaceKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    publickeytoreplace: (f = msg.getPublickeytoreplace()) && proto.VCSEC.PublicKey.toObject(includeInstance, f),
    slottoreplace: jspb.Message.getFieldWithDefault(msg, 2, 0),
    keytoadd: (f = msg.getKeytoadd()) && proto.VCSEC.PublicKey.toObject(includeInstance, f),
    keyrole: jspb.Message.getFieldWithDefault(msg, 4, 0),
    impermanent: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.ReplaceKey}
 */
proto.VCSEC.ReplaceKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.ReplaceKey;
  return proto.VCSEC.ReplaceKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.ReplaceKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.ReplaceKey}
 */
proto.VCSEC.ReplaceKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VCSEC.PublicKey;
      reader.readMessage(value,proto.VCSEC.PublicKey.deserializeBinaryFromReader);
      msg.setPublickeytoreplace(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSlottoreplace(value);
      break;
    case 3:
      var value = new proto.VCSEC.PublicKey;
      reader.readMessage(value,proto.VCSEC.PublicKey.deserializeBinaryFromReader);
      msg.setKeytoadd(value);
      break;
    case 4:
      var value = /** @type {!proto.Keys.Role} */ (reader.readEnum());
      msg.setKeyrole(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setImpermanent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.ReplaceKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.ReplaceKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.ReplaceKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.ReplaceKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublickeytoreplace();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VCSEC.PublicKey.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getKeytoadd();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.VCSEC.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getKeyrole();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getImpermanent();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional PublicKey publicKeyToReplace = 1;
 * @return {?proto.VCSEC.PublicKey}
 */
proto.VCSEC.ReplaceKey.prototype.getPublickeytoreplace = function() {
  return /** @type{?proto.VCSEC.PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.PublicKey, 1));
};


/**
 * @param {?proto.VCSEC.PublicKey|undefined} value
 * @return {!proto.VCSEC.ReplaceKey} returns this
*/
proto.VCSEC.ReplaceKey.prototype.setPublickeytoreplace = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.VCSEC.ReplaceKey.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.ReplaceKey} returns this
 */
proto.VCSEC.ReplaceKey.prototype.clearPublickeytoreplace = function() {
  return this.setPublickeytoreplace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.ReplaceKey.prototype.hasPublickeytoreplace = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 slotToReplace = 2;
 * @return {number}
 */
proto.VCSEC.ReplaceKey.prototype.getSlottoreplace = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.VCSEC.ReplaceKey} returns this
 */
proto.VCSEC.ReplaceKey.prototype.setSlottoreplace = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.VCSEC.ReplaceKey.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.VCSEC.ReplaceKey} returns this
 */
proto.VCSEC.ReplaceKey.prototype.clearSlottoreplace = function() {
  return jspb.Message.setOneofField(this, 2, proto.VCSEC.ReplaceKey.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.ReplaceKey.prototype.hasSlottoreplace = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PublicKey keyToAdd = 3;
 * @return {?proto.VCSEC.PublicKey}
 */
proto.VCSEC.ReplaceKey.prototype.getKeytoadd = function() {
  return /** @type{?proto.VCSEC.PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.PublicKey, 3));
};


/**
 * @param {?proto.VCSEC.PublicKey|undefined} value
 * @return {!proto.VCSEC.ReplaceKey} returns this
*/
proto.VCSEC.ReplaceKey.prototype.setKeytoadd = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.ReplaceKey} returns this
 */
proto.VCSEC.ReplaceKey.prototype.clearKeytoadd = function() {
  return this.setKeytoadd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.ReplaceKey.prototype.hasKeytoadd = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Keys.Role keyRole = 4;
 * @return {!proto.Keys.Role}
 */
proto.VCSEC.ReplaceKey.prototype.getKeyrole = function() {
  return /** @type {!proto.Keys.Role} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.Keys.Role} value
 * @return {!proto.VCSEC.ReplaceKey} returns this
 */
proto.VCSEC.ReplaceKey.prototype.setKeyrole = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool impermanent = 5;
 * @return {boolean}
 */
proto.VCSEC.ReplaceKey.prototype.getImpermanent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.VCSEC.ReplaceKey} returns this
 */
proto.VCSEC.ReplaceKey.prototype.setImpermanent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.VCSEC.WhitelistOperation.oneofGroups_ = [[1,2,3,4,5,7,8,9,16,17]];

/**
 * @enum {number}
 */
proto.VCSEC.WhitelistOperation.SubMessageCase = {
  SUB_MESSAGE_NOT_SET: 0,
  ADDPUBLICKEYTOWHITELIST: 1,
  REMOVEPUBLICKEYFROMWHITELIST: 2,
  ADDPERMISSIONSTOPUBLICKEY: 3,
  REMOVEPERMISSIONSFROMPUBLICKEY: 4,
  ADDKEYTOWHITELISTANDADDPERMISSIONS: 5,
  UPDATEKEYANDPERMISSIONS: 7,
  ADDIMPERMANENTKEY: 8,
  ADDIMPERMANENTKEYANDREMOVEEXISTING: 9,
  REMOVEALLIMPERMANENTKEYS: 16,
  REPLACEKEY: 17
};

/**
 * @return {proto.VCSEC.WhitelistOperation.SubMessageCase}
 */
proto.VCSEC.WhitelistOperation.prototype.getSubMessageCase = function() {
  return /** @type {proto.VCSEC.WhitelistOperation.SubMessageCase} */(jspb.Message.computeOneofCase(this, proto.VCSEC.WhitelistOperation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.WhitelistOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.WhitelistOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.WhitelistOperation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.WhitelistOperation.toObject = function(includeInstance, msg) {
  var f, obj = {
    addpublickeytowhitelist: (f = msg.getAddpublickeytowhitelist()) && proto.VCSEC.PublicKey.toObject(includeInstance, f),
    removepublickeyfromwhitelist: (f = msg.getRemovepublickeyfromwhitelist()) && proto.VCSEC.PublicKey.toObject(includeInstance, f),
    addpermissionstopublickey: (f = msg.getAddpermissionstopublickey()) && proto.VCSEC.PermissionChange.toObject(includeInstance, f),
    removepermissionsfrompublickey: (f = msg.getRemovepermissionsfrompublickey()) && proto.VCSEC.PermissionChange.toObject(includeInstance, f),
    addkeytowhitelistandaddpermissions: (f = msg.getAddkeytowhitelistandaddpermissions()) && proto.VCSEC.PermissionChange.toObject(includeInstance, f),
    updatekeyandpermissions: (f = msg.getUpdatekeyandpermissions()) && proto.VCSEC.PermissionChange.toObject(includeInstance, f),
    addimpermanentkey: (f = msg.getAddimpermanentkey()) && proto.VCSEC.PermissionChange.toObject(includeInstance, f),
    addimpermanentkeyandremoveexisting: (f = msg.getAddimpermanentkeyandremoveexisting()) && proto.VCSEC.PermissionChange.toObject(includeInstance, f),
    removeallimpermanentkeys: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    replacekey: (f = msg.getReplacekey()) && proto.VCSEC.ReplaceKey.toObject(includeInstance, f),
    metadataforkey: (f = msg.getMetadataforkey()) && proto.VCSEC.KeyMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.WhitelistOperation}
 */
proto.VCSEC.WhitelistOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.WhitelistOperation;
  return proto.VCSEC.WhitelistOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.WhitelistOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.WhitelistOperation}
 */
proto.VCSEC.WhitelistOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VCSEC.PublicKey;
      reader.readMessage(value,proto.VCSEC.PublicKey.deserializeBinaryFromReader);
      msg.setAddpublickeytowhitelist(value);
      break;
    case 2:
      var value = new proto.VCSEC.PublicKey;
      reader.readMessage(value,proto.VCSEC.PublicKey.deserializeBinaryFromReader);
      msg.setRemovepublickeyfromwhitelist(value);
      break;
    case 3:
      var value = new proto.VCSEC.PermissionChange;
      reader.readMessage(value,proto.VCSEC.PermissionChange.deserializeBinaryFromReader);
      msg.setAddpermissionstopublickey(value);
      break;
    case 4:
      var value = new proto.VCSEC.PermissionChange;
      reader.readMessage(value,proto.VCSEC.PermissionChange.deserializeBinaryFromReader);
      msg.setRemovepermissionsfrompublickey(value);
      break;
    case 5:
      var value = new proto.VCSEC.PermissionChange;
      reader.readMessage(value,proto.VCSEC.PermissionChange.deserializeBinaryFromReader);
      msg.setAddkeytowhitelistandaddpermissions(value);
      break;
    case 7:
      var value = new proto.VCSEC.PermissionChange;
      reader.readMessage(value,proto.VCSEC.PermissionChange.deserializeBinaryFromReader);
      msg.setUpdatekeyandpermissions(value);
      break;
    case 8:
      var value = new proto.VCSEC.PermissionChange;
      reader.readMessage(value,proto.VCSEC.PermissionChange.deserializeBinaryFromReader);
      msg.setAddimpermanentkey(value);
      break;
    case 9:
      var value = new proto.VCSEC.PermissionChange;
      reader.readMessage(value,proto.VCSEC.PermissionChange.deserializeBinaryFromReader);
      msg.setAddimpermanentkeyandremoveexisting(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRemoveallimpermanentkeys(value);
      break;
    case 17:
      var value = new proto.VCSEC.ReplaceKey;
      reader.readMessage(value,proto.VCSEC.ReplaceKey.deserializeBinaryFromReader);
      msg.setReplacekey(value);
      break;
    case 6:
      var value = new proto.VCSEC.KeyMetadata;
      reader.readMessage(value,proto.VCSEC.KeyMetadata.deserializeBinaryFromReader);
      msg.setMetadataforkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.WhitelistOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.WhitelistOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.WhitelistOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.WhitelistOperation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddpublickeytowhitelist();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VCSEC.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getRemovepublickeyfromwhitelist();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.VCSEC.PublicKey.serializeBinaryToWriter
    );
  }
  f = message.getAddpermissionstopublickey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.VCSEC.PermissionChange.serializeBinaryToWriter
    );
  }
  f = message.getRemovepermissionsfrompublickey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.VCSEC.PermissionChange.serializeBinaryToWriter
    );
  }
  f = message.getAddkeytowhitelistandaddpermissions();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.VCSEC.PermissionChange.serializeBinaryToWriter
    );
  }
  f = message.getUpdatekeyandpermissions();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.VCSEC.PermissionChange.serializeBinaryToWriter
    );
  }
  f = message.getAddimpermanentkey();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.VCSEC.PermissionChange.serializeBinaryToWriter
    );
  }
  f = message.getAddimpermanentkeyandremoveexisting();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.VCSEC.PermissionChange.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getReplacekey();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.VCSEC.ReplaceKey.serializeBinaryToWriter
    );
  }
  f = message.getMetadataforkey();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.VCSEC.KeyMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional PublicKey addPublicKeyToWhitelist = 1;
 * @return {?proto.VCSEC.PublicKey}
 */
proto.VCSEC.WhitelistOperation.prototype.getAddpublickeytowhitelist = function() {
  return /** @type{?proto.VCSEC.PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.PublicKey, 1));
};


/**
 * @param {?proto.VCSEC.PublicKey|undefined} value
 * @return {!proto.VCSEC.WhitelistOperation} returns this
*/
proto.VCSEC.WhitelistOperation.prototype.setAddpublickeytowhitelist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.VCSEC.WhitelistOperation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.WhitelistOperation} returns this
 */
proto.VCSEC.WhitelistOperation.prototype.clearAddpublickeytowhitelist = function() {
  return this.setAddpublickeytowhitelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.WhitelistOperation.prototype.hasAddpublickeytowhitelist = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PublicKey removePublicKeyFromWhitelist = 2;
 * @return {?proto.VCSEC.PublicKey}
 */
proto.VCSEC.WhitelistOperation.prototype.getRemovepublickeyfromwhitelist = function() {
  return /** @type{?proto.VCSEC.PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.PublicKey, 2));
};


/**
 * @param {?proto.VCSEC.PublicKey|undefined} value
 * @return {!proto.VCSEC.WhitelistOperation} returns this
*/
proto.VCSEC.WhitelistOperation.prototype.setRemovepublickeyfromwhitelist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.VCSEC.WhitelistOperation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.WhitelistOperation} returns this
 */
proto.VCSEC.WhitelistOperation.prototype.clearRemovepublickeyfromwhitelist = function() {
  return this.setRemovepublickeyfromwhitelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.WhitelistOperation.prototype.hasRemovepublickeyfromwhitelist = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PermissionChange addPermissionsToPublicKey = 3;
 * @return {?proto.VCSEC.PermissionChange}
 */
proto.VCSEC.WhitelistOperation.prototype.getAddpermissionstopublickey = function() {
  return /** @type{?proto.VCSEC.PermissionChange} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.PermissionChange, 3));
};


/**
 * @param {?proto.VCSEC.PermissionChange|undefined} value
 * @return {!proto.VCSEC.WhitelistOperation} returns this
*/
proto.VCSEC.WhitelistOperation.prototype.setAddpermissionstopublickey = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.VCSEC.WhitelistOperation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.WhitelistOperation} returns this
 */
proto.VCSEC.WhitelistOperation.prototype.clearAddpermissionstopublickey = function() {
  return this.setAddpermissionstopublickey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.WhitelistOperation.prototype.hasAddpermissionstopublickey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PermissionChange removePermissionsFromPublicKey = 4;
 * @return {?proto.VCSEC.PermissionChange}
 */
proto.VCSEC.WhitelistOperation.prototype.getRemovepermissionsfrompublickey = function() {
  return /** @type{?proto.VCSEC.PermissionChange} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.PermissionChange, 4));
};


/**
 * @param {?proto.VCSEC.PermissionChange|undefined} value
 * @return {!proto.VCSEC.WhitelistOperation} returns this
*/
proto.VCSEC.WhitelistOperation.prototype.setRemovepermissionsfrompublickey = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.VCSEC.WhitelistOperation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.WhitelistOperation} returns this
 */
proto.VCSEC.WhitelistOperation.prototype.clearRemovepermissionsfrompublickey = function() {
  return this.setRemovepermissionsfrompublickey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.WhitelistOperation.prototype.hasRemovepermissionsfrompublickey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PermissionChange addKeyToWhitelistAndAddPermissions = 5;
 * @return {?proto.VCSEC.PermissionChange}
 */
proto.VCSEC.WhitelistOperation.prototype.getAddkeytowhitelistandaddpermissions = function() {
  return /** @type{?proto.VCSEC.PermissionChange} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.PermissionChange, 5));
};


/**
 * @param {?proto.VCSEC.PermissionChange|undefined} value
 * @return {!proto.VCSEC.WhitelistOperation} returns this
*/
proto.VCSEC.WhitelistOperation.prototype.setAddkeytowhitelistandaddpermissions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.VCSEC.WhitelistOperation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.WhitelistOperation} returns this
 */
proto.VCSEC.WhitelistOperation.prototype.clearAddkeytowhitelistandaddpermissions = function() {
  return this.setAddkeytowhitelistandaddpermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.WhitelistOperation.prototype.hasAddkeytowhitelistandaddpermissions = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PermissionChange updateKeyAndPermissions = 7;
 * @return {?proto.VCSEC.PermissionChange}
 */
proto.VCSEC.WhitelistOperation.prototype.getUpdatekeyandpermissions = function() {
  return /** @type{?proto.VCSEC.PermissionChange} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.PermissionChange, 7));
};


/**
 * @param {?proto.VCSEC.PermissionChange|undefined} value
 * @return {!proto.VCSEC.WhitelistOperation} returns this
*/
proto.VCSEC.WhitelistOperation.prototype.setUpdatekeyandpermissions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.VCSEC.WhitelistOperation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.WhitelistOperation} returns this
 */
proto.VCSEC.WhitelistOperation.prototype.clearUpdatekeyandpermissions = function() {
  return this.setUpdatekeyandpermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.WhitelistOperation.prototype.hasUpdatekeyandpermissions = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PermissionChange addImpermanentKey = 8;
 * @return {?proto.VCSEC.PermissionChange}
 */
proto.VCSEC.WhitelistOperation.prototype.getAddimpermanentkey = function() {
  return /** @type{?proto.VCSEC.PermissionChange} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.PermissionChange, 8));
};


/**
 * @param {?proto.VCSEC.PermissionChange|undefined} value
 * @return {!proto.VCSEC.WhitelistOperation} returns this
*/
proto.VCSEC.WhitelistOperation.prototype.setAddimpermanentkey = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.VCSEC.WhitelistOperation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.WhitelistOperation} returns this
 */
proto.VCSEC.WhitelistOperation.prototype.clearAddimpermanentkey = function() {
  return this.setAddimpermanentkey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.WhitelistOperation.prototype.hasAddimpermanentkey = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional PermissionChange addImpermanentKeyAndRemoveExisting = 9;
 * @return {?proto.VCSEC.PermissionChange}
 */
proto.VCSEC.WhitelistOperation.prototype.getAddimpermanentkeyandremoveexisting = function() {
  return /** @type{?proto.VCSEC.PermissionChange} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.PermissionChange, 9));
};


/**
 * @param {?proto.VCSEC.PermissionChange|undefined} value
 * @return {!proto.VCSEC.WhitelistOperation} returns this
*/
proto.VCSEC.WhitelistOperation.prototype.setAddimpermanentkeyandremoveexisting = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.VCSEC.WhitelistOperation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.WhitelistOperation} returns this
 */
proto.VCSEC.WhitelistOperation.prototype.clearAddimpermanentkeyandremoveexisting = function() {
  return this.setAddimpermanentkeyandremoveexisting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.WhitelistOperation.prototype.hasAddimpermanentkeyandremoveexisting = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool removeAllImpermanentKeys = 16;
 * @return {boolean}
 */
proto.VCSEC.WhitelistOperation.prototype.getRemoveallimpermanentkeys = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.VCSEC.WhitelistOperation} returns this
 */
proto.VCSEC.WhitelistOperation.prototype.setRemoveallimpermanentkeys = function(value) {
  return jspb.Message.setOneofField(this, 16, proto.VCSEC.WhitelistOperation.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.VCSEC.WhitelistOperation} returns this
 */
proto.VCSEC.WhitelistOperation.prototype.clearRemoveallimpermanentkeys = function() {
  return jspb.Message.setOneofField(this, 16, proto.VCSEC.WhitelistOperation.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.WhitelistOperation.prototype.hasRemoveallimpermanentkeys = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional ReplaceKey replaceKey = 17;
 * @return {?proto.VCSEC.ReplaceKey}
 */
proto.VCSEC.WhitelistOperation.prototype.getReplacekey = function() {
  return /** @type{?proto.VCSEC.ReplaceKey} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.ReplaceKey, 17));
};


/**
 * @param {?proto.VCSEC.ReplaceKey|undefined} value
 * @return {!proto.VCSEC.WhitelistOperation} returns this
*/
proto.VCSEC.WhitelistOperation.prototype.setReplacekey = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.VCSEC.WhitelistOperation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.WhitelistOperation} returns this
 */
proto.VCSEC.WhitelistOperation.prototype.clearReplacekey = function() {
  return this.setReplacekey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.WhitelistOperation.prototype.hasReplacekey = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional KeyMetadata metadataForKey = 6;
 * @return {?proto.VCSEC.KeyMetadata}
 */
proto.VCSEC.WhitelistOperation.prototype.getMetadataforkey = function() {
  return /** @type{?proto.VCSEC.KeyMetadata} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.KeyMetadata, 6));
};


/**
 * @param {?proto.VCSEC.KeyMetadata|undefined} value
 * @return {!proto.VCSEC.WhitelistOperation} returns this
*/
proto.VCSEC.WhitelistOperation.prototype.setMetadataforkey = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.WhitelistOperation} returns this
 */
proto.VCSEC.WhitelistOperation.prototype.clearMetadataforkey = function() {
  return this.setMetadataforkey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.WhitelistOperation.prototype.hasMetadataforkey = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.WhitelistOperation_status.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.WhitelistOperation_status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.WhitelistOperation_status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.WhitelistOperation_status.toObject = function(includeInstance, msg) {
  var f, obj = {
    whitelistoperationinformation: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signerofoperation: (f = msg.getSignerofoperation()) && proto.VCSEC.KeyIdentifier.toObject(includeInstance, f),
    operationstatus: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.WhitelistOperation_status}
 */
proto.VCSEC.WhitelistOperation_status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.WhitelistOperation_status;
  return proto.VCSEC.WhitelistOperation_status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.WhitelistOperation_status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.WhitelistOperation_status}
 */
proto.VCSEC.WhitelistOperation_status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.VCSEC.WhitelistOperation_information_E} */ (reader.readEnum());
      msg.setWhitelistoperationinformation(value);
      break;
    case 2:
      var value = new proto.VCSEC.KeyIdentifier;
      reader.readMessage(value,proto.VCSEC.KeyIdentifier.deserializeBinaryFromReader);
      msg.setSignerofoperation(value);
      break;
    case 3:
      var value = /** @type {!proto.VCSEC.OperationStatus_E} */ (reader.readEnum());
      msg.setOperationstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.WhitelistOperation_status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.WhitelistOperation_status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.WhitelistOperation_status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.WhitelistOperation_status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWhitelistoperationinformation();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSignerofoperation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.VCSEC.KeyIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getOperationstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional WhitelistOperation_information_E whitelistOperationInformation = 1;
 * @return {!proto.VCSEC.WhitelistOperation_information_E}
 */
proto.VCSEC.WhitelistOperation_status.prototype.getWhitelistoperationinformation = function() {
  return /** @type {!proto.VCSEC.WhitelistOperation_information_E} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.VCSEC.WhitelistOperation_information_E} value
 * @return {!proto.VCSEC.WhitelistOperation_status} returns this
 */
proto.VCSEC.WhitelistOperation_status.prototype.setWhitelistoperationinformation = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional KeyIdentifier signerOfOperation = 2;
 * @return {?proto.VCSEC.KeyIdentifier}
 */
proto.VCSEC.WhitelistOperation_status.prototype.getSignerofoperation = function() {
  return /** @type{?proto.VCSEC.KeyIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.KeyIdentifier, 2));
};


/**
 * @param {?proto.VCSEC.KeyIdentifier|undefined} value
 * @return {!proto.VCSEC.WhitelistOperation_status} returns this
*/
proto.VCSEC.WhitelistOperation_status.prototype.setSignerofoperation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.WhitelistOperation_status} returns this
 */
proto.VCSEC.WhitelistOperation_status.prototype.clearSignerofoperation = function() {
  return this.setSignerofoperation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.WhitelistOperation_status.prototype.hasSignerofoperation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OperationStatus_E operationStatus = 3;
 * @return {!proto.VCSEC.OperationStatus_E}
 */
proto.VCSEC.WhitelistOperation_status.prototype.getOperationstatus = function() {
  return /** @type {!proto.VCSEC.OperationStatus_E} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.VCSEC.OperationStatus_E} value
 * @return {!proto.VCSEC.WhitelistOperation_status} returns this
 */
proto.VCSEC.WhitelistOperation_status.prototype.setOperationstatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.SignedMessage_status.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.SignedMessage_status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.SignedMessage_status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.SignedMessage_status.toObject = function(includeInstance, msg) {
  var f, obj = {
    counter: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signedmessageinformation: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.SignedMessage_status}
 */
proto.VCSEC.SignedMessage_status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.SignedMessage_status;
  return proto.VCSEC.SignedMessage_status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.SignedMessage_status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.SignedMessage_status}
 */
proto.VCSEC.SignedMessage_status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCounter(value);
      break;
    case 2:
      var value = /** @type {!proto.VCSEC.SignedMessage_information_E} */ (reader.readEnum());
      msg.setSignedmessageinformation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.SignedMessage_status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.SignedMessage_status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.SignedMessage_status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.SignedMessage_status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCounter();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSignedmessageinformation();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional uint32 counter = 1;
 * @return {number}
 */
proto.VCSEC.SignedMessage_status.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.VCSEC.SignedMessage_status} returns this
 */
proto.VCSEC.SignedMessage_status.prototype.setCounter = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional SignedMessage_information_E signedMessageInformation = 2;
 * @return {!proto.VCSEC.SignedMessage_information_E}
 */
proto.VCSEC.SignedMessage_status.prototype.getSignedmessageinformation = function() {
  return /** @type {!proto.VCSEC.SignedMessage_information_E} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.VCSEC.SignedMessage_information_E} value
 * @return {!proto.VCSEC.SignedMessage_status} returns this
 */
proto.VCSEC.SignedMessage_status.prototype.setSignedmessageinformation = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.VCSEC.CommandStatus.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.VCSEC.CommandStatus.SubMessageCase = {
  SUB_MESSAGE_NOT_SET: 0,
  SIGNEDMESSAGESTATUS: 2,
  WHITELISTOPERATIONSTATUS: 3
};

/**
 * @return {proto.VCSEC.CommandStatus.SubMessageCase}
 */
proto.VCSEC.CommandStatus.prototype.getSubMessageCase = function() {
  return /** @type {proto.VCSEC.CommandStatus.SubMessageCase} */(jspb.Message.computeOneofCase(this, proto.VCSEC.CommandStatus.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.CommandStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.CommandStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.CommandStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.CommandStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    operationstatus: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signedmessagestatus: (f = msg.getSignedmessagestatus()) && proto.VCSEC.SignedMessage_status.toObject(includeInstance, f),
    whitelistoperationstatus: (f = msg.getWhitelistoperationstatus()) && proto.VCSEC.WhitelistOperation_status.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.CommandStatus}
 */
proto.VCSEC.CommandStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.CommandStatus;
  return proto.VCSEC.CommandStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.CommandStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.CommandStatus}
 */
proto.VCSEC.CommandStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.VCSEC.OperationStatus_E} */ (reader.readEnum());
      msg.setOperationstatus(value);
      break;
    case 2:
      var value = new proto.VCSEC.SignedMessage_status;
      reader.readMessage(value,proto.VCSEC.SignedMessage_status.deserializeBinaryFromReader);
      msg.setSignedmessagestatus(value);
      break;
    case 3:
      var value = new proto.VCSEC.WhitelistOperation_status;
      reader.readMessage(value,proto.VCSEC.WhitelistOperation_status.deserializeBinaryFromReader);
      msg.setWhitelistoperationstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.CommandStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.CommandStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.CommandStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.CommandStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperationstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSignedmessagestatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.VCSEC.SignedMessage_status.serializeBinaryToWriter
    );
  }
  f = message.getWhitelistoperationstatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.VCSEC.WhitelistOperation_status.serializeBinaryToWriter
    );
  }
};


/**
 * optional OperationStatus_E operationStatus = 1;
 * @return {!proto.VCSEC.OperationStatus_E}
 */
proto.VCSEC.CommandStatus.prototype.getOperationstatus = function() {
  return /** @type {!proto.VCSEC.OperationStatus_E} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.VCSEC.OperationStatus_E} value
 * @return {!proto.VCSEC.CommandStatus} returns this
 */
proto.VCSEC.CommandStatus.prototype.setOperationstatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional SignedMessage_status signedMessageStatus = 2;
 * @return {?proto.VCSEC.SignedMessage_status}
 */
proto.VCSEC.CommandStatus.prototype.getSignedmessagestatus = function() {
  return /** @type{?proto.VCSEC.SignedMessage_status} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.SignedMessage_status, 2));
};


/**
 * @param {?proto.VCSEC.SignedMessage_status|undefined} value
 * @return {!proto.VCSEC.CommandStatus} returns this
*/
proto.VCSEC.CommandStatus.prototype.setSignedmessagestatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.VCSEC.CommandStatus.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.CommandStatus} returns this
 */
proto.VCSEC.CommandStatus.prototype.clearSignedmessagestatus = function() {
  return this.setSignedmessagestatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.CommandStatus.prototype.hasSignedmessagestatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional WhitelistOperation_status whitelistOperationStatus = 3;
 * @return {?proto.VCSEC.WhitelistOperation_status}
 */
proto.VCSEC.CommandStatus.prototype.getWhitelistoperationstatus = function() {
  return /** @type{?proto.VCSEC.WhitelistOperation_status} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.WhitelistOperation_status, 3));
};


/**
 * @param {?proto.VCSEC.WhitelistOperation_status|undefined} value
 * @return {!proto.VCSEC.CommandStatus} returns this
*/
proto.VCSEC.CommandStatus.prototype.setWhitelistoperationstatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.VCSEC.CommandStatus.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.CommandStatus} returns this
 */
proto.VCSEC.CommandStatus.prototype.clearWhitelistoperationstatus = function() {
  return this.setWhitelistoperationstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.CommandStatus.prototype.hasWhitelistoperationstatus = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.VCSEC.UnsignedMessage.oneofGroups_ = [[1,2,4,16]];

/**
 * @enum {number}
 */
proto.VCSEC.UnsignedMessage.SubMessageCase = {
  SUB_MESSAGE_NOT_SET: 0,
  INFORMATIONREQUEST: 1,
  RKEACTION: 2,
  CLOSUREMOVEREQUEST: 4,
  WHITELISTOPERATION: 16
};

/**
 * @return {proto.VCSEC.UnsignedMessage.SubMessageCase}
 */
proto.VCSEC.UnsignedMessage.prototype.getSubMessageCase = function() {
  return /** @type {proto.VCSEC.UnsignedMessage.SubMessageCase} */(jspb.Message.computeOneofCase(this, proto.VCSEC.UnsignedMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.UnsignedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.UnsignedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.UnsignedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.UnsignedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    informationrequest: (f = msg.getInformationrequest()) && proto.VCSEC.InformationRequest.toObject(includeInstance, f),
    rkeaction: jspb.Message.getFieldWithDefault(msg, 2, 0),
    closuremoverequest: (f = msg.getClosuremoverequest()) && proto.VCSEC.ClosureMoveRequest.toObject(includeInstance, f),
    whitelistoperation: (f = msg.getWhitelistoperation()) && proto.VCSEC.WhitelistOperation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.UnsignedMessage}
 */
proto.VCSEC.UnsignedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.UnsignedMessage;
  return proto.VCSEC.UnsignedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.UnsignedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.UnsignedMessage}
 */
proto.VCSEC.UnsignedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VCSEC.InformationRequest;
      reader.readMessage(value,proto.VCSEC.InformationRequest.deserializeBinaryFromReader);
      msg.setInformationrequest(value);
      break;
    case 2:
      var value = /** @type {!proto.VCSEC.RKEAction_E} */ (reader.readEnum());
      msg.setRkeaction(value);
      break;
    case 4:
      var value = new proto.VCSEC.ClosureMoveRequest;
      reader.readMessage(value,proto.VCSEC.ClosureMoveRequest.deserializeBinaryFromReader);
      msg.setClosuremoverequest(value);
      break;
    case 16:
      var value = new proto.VCSEC.WhitelistOperation;
      reader.readMessage(value,proto.VCSEC.WhitelistOperation.deserializeBinaryFromReader);
      msg.setWhitelistoperation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.UnsignedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.UnsignedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.UnsignedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.UnsignedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInformationrequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VCSEC.InformationRequest.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.VCSEC.RKEAction_E} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getClosuremoverequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.VCSEC.ClosureMoveRequest.serializeBinaryToWriter
    );
  }
  f = message.getWhitelistoperation();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.VCSEC.WhitelistOperation.serializeBinaryToWriter
    );
  }
};


/**
 * optional InformationRequest InformationRequest = 1;
 * @return {?proto.VCSEC.InformationRequest}
 */
proto.VCSEC.UnsignedMessage.prototype.getInformationrequest = function() {
  return /** @type{?proto.VCSEC.InformationRequest} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.InformationRequest, 1));
};


/**
 * @param {?proto.VCSEC.InformationRequest|undefined} value
 * @return {!proto.VCSEC.UnsignedMessage} returns this
*/
proto.VCSEC.UnsignedMessage.prototype.setInformationrequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.VCSEC.UnsignedMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.UnsignedMessage} returns this
 */
proto.VCSEC.UnsignedMessage.prototype.clearInformationrequest = function() {
  return this.setInformationrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.UnsignedMessage.prototype.hasInformationrequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RKEAction_E RKEAction = 2;
 * @return {!proto.VCSEC.RKEAction_E}
 */
proto.VCSEC.UnsignedMessage.prototype.getRkeaction = function() {
  return /** @type {!proto.VCSEC.RKEAction_E} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.VCSEC.RKEAction_E} value
 * @return {!proto.VCSEC.UnsignedMessage} returns this
 */
proto.VCSEC.UnsignedMessage.prototype.setRkeaction = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.VCSEC.UnsignedMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.VCSEC.UnsignedMessage} returns this
 */
proto.VCSEC.UnsignedMessage.prototype.clearRkeaction = function() {
  return jspb.Message.setOneofField(this, 2, proto.VCSEC.UnsignedMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.UnsignedMessage.prototype.hasRkeaction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ClosureMoveRequest closureMoveRequest = 4;
 * @return {?proto.VCSEC.ClosureMoveRequest}
 */
proto.VCSEC.UnsignedMessage.prototype.getClosuremoverequest = function() {
  return /** @type{?proto.VCSEC.ClosureMoveRequest} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.ClosureMoveRequest, 4));
};


/**
 * @param {?proto.VCSEC.ClosureMoveRequest|undefined} value
 * @return {!proto.VCSEC.UnsignedMessage} returns this
*/
proto.VCSEC.UnsignedMessage.prototype.setClosuremoverequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.VCSEC.UnsignedMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.UnsignedMessage} returns this
 */
proto.VCSEC.UnsignedMessage.prototype.clearClosuremoverequest = function() {
  return this.setClosuremoverequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.UnsignedMessage.prototype.hasClosuremoverequest = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional WhitelistOperation WhitelistOperation = 16;
 * @return {?proto.VCSEC.WhitelistOperation}
 */
proto.VCSEC.UnsignedMessage.prototype.getWhitelistoperation = function() {
  return /** @type{?proto.VCSEC.WhitelistOperation} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.WhitelistOperation, 16));
};


/**
 * @param {?proto.VCSEC.WhitelistOperation|undefined} value
 * @return {!proto.VCSEC.UnsignedMessage} returns this
*/
proto.VCSEC.UnsignedMessage.prototype.setWhitelistoperation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.VCSEC.UnsignedMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.UnsignedMessage} returns this
 */
proto.VCSEC.UnsignedMessage.prototype.clearWhitelistoperation = function() {
  return this.setWhitelistoperation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.UnsignedMessage.prototype.hasWhitelistoperation = function() {
  return jspb.Message.getField(this, 16) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.ClosureStatuses.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.ClosureStatuses.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.ClosureStatuses} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.ClosureStatuses.toObject = function(includeInstance, msg) {
  var f, obj = {
    frontdriverdoor: jspb.Message.getFieldWithDefault(msg, 1, 0),
    frontpassengerdoor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    reardriverdoor: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rearpassengerdoor: jspb.Message.getFieldWithDefault(msg, 4, 0),
    reartrunk: jspb.Message.getFieldWithDefault(msg, 5, 0),
    fronttrunk: jspb.Message.getFieldWithDefault(msg, 6, 0),
    chargeport: jspb.Message.getFieldWithDefault(msg, 7, 0),
    tonneau: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.ClosureStatuses}
 */
proto.VCSEC.ClosureStatuses.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.ClosureStatuses;
  return proto.VCSEC.ClosureStatuses.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.ClosureStatuses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.ClosureStatuses}
 */
proto.VCSEC.ClosureStatuses.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.VCSEC.ClosureState_E} */ (reader.readEnum());
      msg.setFrontdriverdoor(value);
      break;
    case 2:
      var value = /** @type {!proto.VCSEC.ClosureState_E} */ (reader.readEnum());
      msg.setFrontpassengerdoor(value);
      break;
    case 3:
      var value = /** @type {!proto.VCSEC.ClosureState_E} */ (reader.readEnum());
      msg.setReardriverdoor(value);
      break;
    case 4:
      var value = /** @type {!proto.VCSEC.ClosureState_E} */ (reader.readEnum());
      msg.setRearpassengerdoor(value);
      break;
    case 5:
      var value = /** @type {!proto.VCSEC.ClosureState_E} */ (reader.readEnum());
      msg.setReartrunk(value);
      break;
    case 6:
      var value = /** @type {!proto.VCSEC.ClosureState_E} */ (reader.readEnum());
      msg.setFronttrunk(value);
      break;
    case 7:
      var value = /** @type {!proto.VCSEC.ClosureState_E} */ (reader.readEnum());
      msg.setChargeport(value);
      break;
    case 8:
      var value = /** @type {!proto.VCSEC.ClosureState_E} */ (reader.readEnum());
      msg.setTonneau(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.ClosureStatuses.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.ClosureStatuses.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.ClosureStatuses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.ClosureStatuses.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrontdriverdoor();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFrontpassengerdoor();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getReardriverdoor();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRearpassengerdoor();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getReartrunk();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getFronttrunk();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getChargeport();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getTonneau();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * optional ClosureState_E frontDriverDoor = 1;
 * @return {!proto.VCSEC.ClosureState_E}
 */
proto.VCSEC.ClosureStatuses.prototype.getFrontdriverdoor = function() {
  return /** @type {!proto.VCSEC.ClosureState_E} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.VCSEC.ClosureState_E} value
 * @return {!proto.VCSEC.ClosureStatuses} returns this
 */
proto.VCSEC.ClosureStatuses.prototype.setFrontdriverdoor = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ClosureState_E frontPassengerDoor = 2;
 * @return {!proto.VCSEC.ClosureState_E}
 */
proto.VCSEC.ClosureStatuses.prototype.getFrontpassengerdoor = function() {
  return /** @type {!proto.VCSEC.ClosureState_E} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.VCSEC.ClosureState_E} value
 * @return {!proto.VCSEC.ClosureStatuses} returns this
 */
proto.VCSEC.ClosureStatuses.prototype.setFrontpassengerdoor = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ClosureState_E rearDriverDoor = 3;
 * @return {!proto.VCSEC.ClosureState_E}
 */
proto.VCSEC.ClosureStatuses.prototype.getReardriverdoor = function() {
  return /** @type {!proto.VCSEC.ClosureState_E} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.VCSEC.ClosureState_E} value
 * @return {!proto.VCSEC.ClosureStatuses} returns this
 */
proto.VCSEC.ClosureStatuses.prototype.setReardriverdoor = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional ClosureState_E rearPassengerDoor = 4;
 * @return {!proto.VCSEC.ClosureState_E}
 */
proto.VCSEC.ClosureStatuses.prototype.getRearpassengerdoor = function() {
  return /** @type {!proto.VCSEC.ClosureState_E} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.VCSEC.ClosureState_E} value
 * @return {!proto.VCSEC.ClosureStatuses} returns this
 */
proto.VCSEC.ClosureStatuses.prototype.setRearpassengerdoor = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional ClosureState_E rearTrunk = 5;
 * @return {!proto.VCSEC.ClosureState_E}
 */
proto.VCSEC.ClosureStatuses.prototype.getReartrunk = function() {
  return /** @type {!proto.VCSEC.ClosureState_E} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.VCSEC.ClosureState_E} value
 * @return {!proto.VCSEC.ClosureStatuses} returns this
 */
proto.VCSEC.ClosureStatuses.prototype.setReartrunk = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional ClosureState_E frontTrunk = 6;
 * @return {!proto.VCSEC.ClosureState_E}
 */
proto.VCSEC.ClosureStatuses.prototype.getFronttrunk = function() {
  return /** @type {!proto.VCSEC.ClosureState_E} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.VCSEC.ClosureState_E} value
 * @return {!proto.VCSEC.ClosureStatuses} returns this
 */
proto.VCSEC.ClosureStatuses.prototype.setFronttrunk = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional ClosureState_E chargePort = 7;
 * @return {!proto.VCSEC.ClosureState_E}
 */
proto.VCSEC.ClosureStatuses.prototype.getChargeport = function() {
  return /** @type {!proto.VCSEC.ClosureState_E} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.VCSEC.ClosureState_E} value
 * @return {!proto.VCSEC.ClosureStatuses} returns this
 */
proto.VCSEC.ClosureStatuses.prototype.setChargeport = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional ClosureState_E tonneau = 8;
 * @return {!proto.VCSEC.ClosureState_E}
 */
proto.VCSEC.ClosureStatuses.prototype.getTonneau = function() {
  return /** @type {!proto.VCSEC.ClosureState_E} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.VCSEC.ClosureState_E} value
 * @return {!proto.VCSEC.ClosureStatuses} returns this
 */
proto.VCSEC.ClosureStatuses.prototype.setTonneau = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.DetailedClosureStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.DetailedClosureStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.DetailedClosureStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.DetailedClosureStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    tonneaupercentopen: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.DetailedClosureStatus}
 */
proto.VCSEC.DetailedClosureStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.DetailedClosureStatus;
  return proto.VCSEC.DetailedClosureStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.DetailedClosureStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.DetailedClosureStatus}
 */
proto.VCSEC.DetailedClosureStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTonneaupercentopen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.DetailedClosureStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.DetailedClosureStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.DetailedClosureStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.DetailedClosureStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTonneaupercentopen();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 tonneauPercentOpen = 1;
 * @return {number}
 */
proto.VCSEC.DetailedClosureStatus.prototype.getTonneaupercentopen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.VCSEC.DetailedClosureStatus} returns this
 */
proto.VCSEC.DetailedClosureStatus.prototype.setTonneaupercentopen = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.VehicleStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.VehicleStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.VehicleStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.VehicleStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    closurestatuses: (f = msg.getClosurestatuses()) && proto.VCSEC.ClosureStatuses.toObject(includeInstance, f),
    vehiclelockstate: jspb.Message.getFieldWithDefault(msg, 2, 0),
    vehiclesleepstatus: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userpresence: jspb.Message.getFieldWithDefault(msg, 4, 0),
    detailedclosurestatus: (f = msg.getDetailedclosurestatus()) && proto.VCSEC.DetailedClosureStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.VehicleStatus}
 */
proto.VCSEC.VehicleStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.VehicleStatus;
  return proto.VCSEC.VehicleStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.VehicleStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.VehicleStatus}
 */
proto.VCSEC.VehicleStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VCSEC.ClosureStatuses;
      reader.readMessage(value,proto.VCSEC.ClosureStatuses.deserializeBinaryFromReader);
      msg.setClosurestatuses(value);
      break;
    case 2:
      var value = /** @type {!proto.VCSEC.VehicleLockState_E} */ (reader.readEnum());
      msg.setVehiclelockstate(value);
      break;
    case 3:
      var value = /** @type {!proto.VCSEC.VehicleSleepStatus_E} */ (reader.readEnum());
      msg.setVehiclesleepstatus(value);
      break;
    case 4:
      var value = /** @type {!proto.VCSEC.UserPresence_E} */ (reader.readEnum());
      msg.setUserpresence(value);
      break;
    case 5:
      var value = new proto.VCSEC.DetailedClosureStatus;
      reader.readMessage(value,proto.VCSEC.DetailedClosureStatus.deserializeBinaryFromReader);
      msg.setDetailedclosurestatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.VehicleStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.VehicleStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.VehicleStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.VehicleStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClosurestatuses();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VCSEC.ClosureStatuses.serializeBinaryToWriter
    );
  }
  f = message.getVehiclelockstate();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getVehiclesleepstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getUserpresence();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getDetailedclosurestatus();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.VCSEC.DetailedClosureStatus.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClosureStatuses closureStatuses = 1;
 * @return {?proto.VCSEC.ClosureStatuses}
 */
proto.VCSEC.VehicleStatus.prototype.getClosurestatuses = function() {
  return /** @type{?proto.VCSEC.ClosureStatuses} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.ClosureStatuses, 1));
};


/**
 * @param {?proto.VCSEC.ClosureStatuses|undefined} value
 * @return {!proto.VCSEC.VehicleStatus} returns this
*/
proto.VCSEC.VehicleStatus.prototype.setClosurestatuses = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.VehicleStatus} returns this
 */
proto.VCSEC.VehicleStatus.prototype.clearClosurestatuses = function() {
  return this.setClosurestatuses(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.VehicleStatus.prototype.hasClosurestatuses = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VehicleLockState_E vehicleLockState = 2;
 * @return {!proto.VCSEC.VehicleLockState_E}
 */
proto.VCSEC.VehicleStatus.prototype.getVehiclelockstate = function() {
  return /** @type {!proto.VCSEC.VehicleLockState_E} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.VCSEC.VehicleLockState_E} value
 * @return {!proto.VCSEC.VehicleStatus} returns this
 */
proto.VCSEC.VehicleStatus.prototype.setVehiclelockstate = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional VehicleSleepStatus_E vehicleSleepStatus = 3;
 * @return {!proto.VCSEC.VehicleSleepStatus_E}
 */
proto.VCSEC.VehicleStatus.prototype.getVehiclesleepstatus = function() {
  return /** @type {!proto.VCSEC.VehicleSleepStatus_E} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.VCSEC.VehicleSleepStatus_E} value
 * @return {!proto.VCSEC.VehicleStatus} returns this
 */
proto.VCSEC.VehicleStatus.prototype.setVehiclesleepstatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional UserPresence_E userPresence = 4;
 * @return {!proto.VCSEC.UserPresence_E}
 */
proto.VCSEC.VehicleStatus.prototype.getUserpresence = function() {
  return /** @type {!proto.VCSEC.UserPresence_E} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.VCSEC.UserPresence_E} value
 * @return {!proto.VCSEC.VehicleStatus} returns this
 */
proto.VCSEC.VehicleStatus.prototype.setUserpresence = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional DetailedClosureStatus detailedClosureStatus = 5;
 * @return {?proto.VCSEC.DetailedClosureStatus}
 */
proto.VCSEC.VehicleStatus.prototype.getDetailedclosurestatus = function() {
  return /** @type{?proto.VCSEC.DetailedClosureStatus} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.DetailedClosureStatus, 5));
};


/**
 * @param {?proto.VCSEC.DetailedClosureStatus|undefined} value
 * @return {!proto.VCSEC.VehicleStatus} returns this
*/
proto.VCSEC.VehicleStatus.prototype.setDetailedclosurestatus = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.VehicleStatus} returns this
 */
proto.VCSEC.VehicleStatus.prototype.clearDetailedclosurestatus = function() {
  return this.setDetailedclosurestatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.VehicleStatus.prototype.hasDetailedclosurestatus = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.VCSEC.FromVCSECMessage.oneofGroups_ = [[1,4,16,17,46]];

/**
 * @enum {number}
 */
proto.VCSEC.FromVCSECMessage.SubMessageCase = {
  SUB_MESSAGE_NOT_SET: 0,
  VEHICLESTATUS: 1,
  COMMANDSTATUS: 4,
  WHITELISTINFO: 16,
  WHITELISTENTRYINFO: 17,
  NOMINALERROR: 46
};

/**
 * @return {proto.VCSEC.FromVCSECMessage.SubMessageCase}
 */
proto.VCSEC.FromVCSECMessage.prototype.getSubMessageCase = function() {
  return /** @type {proto.VCSEC.FromVCSECMessage.SubMessageCase} */(jspb.Message.computeOneofCase(this, proto.VCSEC.FromVCSECMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VCSEC.FromVCSECMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.VCSEC.FromVCSECMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VCSEC.FromVCSECMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.FromVCSECMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    vehiclestatus: (f = msg.getVehiclestatus()) && proto.VCSEC.VehicleStatus.toObject(includeInstance, f),
    commandstatus: (f = msg.getCommandstatus()) && proto.VCSEC.CommandStatus.toObject(includeInstance, f),
    whitelistinfo: (f = msg.getWhitelistinfo()) && proto.VCSEC.WhitelistInfo.toObject(includeInstance, f),
    whitelistentryinfo: (f = msg.getWhitelistentryinfo()) && proto.VCSEC.WhitelistEntryInfo.toObject(includeInstance, f),
    nominalerror: (f = msg.getNominalerror()) && errors_pb.NominalError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VCSEC.FromVCSECMessage}
 */
proto.VCSEC.FromVCSECMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VCSEC.FromVCSECMessage;
  return proto.VCSEC.FromVCSECMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VCSEC.FromVCSECMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VCSEC.FromVCSECMessage}
 */
proto.VCSEC.FromVCSECMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VCSEC.VehicleStatus;
      reader.readMessage(value,proto.VCSEC.VehicleStatus.deserializeBinaryFromReader);
      msg.setVehiclestatus(value);
      break;
    case 4:
      var value = new proto.VCSEC.CommandStatus;
      reader.readMessage(value,proto.VCSEC.CommandStatus.deserializeBinaryFromReader);
      msg.setCommandstatus(value);
      break;
    case 16:
      var value = new proto.VCSEC.WhitelistInfo;
      reader.readMessage(value,proto.VCSEC.WhitelistInfo.deserializeBinaryFromReader);
      msg.setWhitelistinfo(value);
      break;
    case 17:
      var value = new proto.VCSEC.WhitelistEntryInfo;
      reader.readMessage(value,proto.VCSEC.WhitelistEntryInfo.deserializeBinaryFromReader);
      msg.setWhitelistentryinfo(value);
      break;
    case 46:
      var value = new errors_pb.NominalError;
      reader.readMessage(value,errors_pb.NominalError.deserializeBinaryFromReader);
      msg.setNominalerror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VCSEC.FromVCSECMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VCSEC.FromVCSECMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VCSEC.FromVCSECMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VCSEC.FromVCSECMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVehiclestatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VCSEC.VehicleStatus.serializeBinaryToWriter
    );
  }
  f = message.getCommandstatus();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.VCSEC.CommandStatus.serializeBinaryToWriter
    );
  }
  f = message.getWhitelistinfo();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.VCSEC.WhitelistInfo.serializeBinaryToWriter
    );
  }
  f = message.getWhitelistentryinfo();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.VCSEC.WhitelistEntryInfo.serializeBinaryToWriter
    );
  }
  f = message.getNominalerror();
  if (f != null) {
    writer.writeMessage(
      46,
      f,
      errors_pb.NominalError.serializeBinaryToWriter
    );
  }
};


/**
 * optional VehicleStatus vehicleStatus = 1;
 * @return {?proto.VCSEC.VehicleStatus}
 */
proto.VCSEC.FromVCSECMessage.prototype.getVehiclestatus = function() {
  return /** @type{?proto.VCSEC.VehicleStatus} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.VehicleStatus, 1));
};


/**
 * @param {?proto.VCSEC.VehicleStatus|undefined} value
 * @return {!proto.VCSEC.FromVCSECMessage} returns this
*/
proto.VCSEC.FromVCSECMessage.prototype.setVehiclestatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.VCSEC.FromVCSECMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.FromVCSECMessage} returns this
 */
proto.VCSEC.FromVCSECMessage.prototype.clearVehiclestatus = function() {
  return this.setVehiclestatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.FromVCSECMessage.prototype.hasVehiclestatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CommandStatus commandStatus = 4;
 * @return {?proto.VCSEC.CommandStatus}
 */
proto.VCSEC.FromVCSECMessage.prototype.getCommandstatus = function() {
  return /** @type{?proto.VCSEC.CommandStatus} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.CommandStatus, 4));
};


/**
 * @param {?proto.VCSEC.CommandStatus|undefined} value
 * @return {!proto.VCSEC.FromVCSECMessage} returns this
*/
proto.VCSEC.FromVCSECMessage.prototype.setCommandstatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.VCSEC.FromVCSECMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.FromVCSECMessage} returns this
 */
proto.VCSEC.FromVCSECMessage.prototype.clearCommandstatus = function() {
  return this.setCommandstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.FromVCSECMessage.prototype.hasCommandstatus = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional WhitelistInfo whitelistInfo = 16;
 * @return {?proto.VCSEC.WhitelistInfo}
 */
proto.VCSEC.FromVCSECMessage.prototype.getWhitelistinfo = function() {
  return /** @type{?proto.VCSEC.WhitelistInfo} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.WhitelistInfo, 16));
};


/**
 * @param {?proto.VCSEC.WhitelistInfo|undefined} value
 * @return {!proto.VCSEC.FromVCSECMessage} returns this
*/
proto.VCSEC.FromVCSECMessage.prototype.setWhitelistinfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.VCSEC.FromVCSECMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.FromVCSECMessage} returns this
 */
proto.VCSEC.FromVCSECMessage.prototype.clearWhitelistinfo = function() {
  return this.setWhitelistinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.FromVCSECMessage.prototype.hasWhitelistinfo = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional WhitelistEntryInfo whitelistEntryInfo = 17;
 * @return {?proto.VCSEC.WhitelistEntryInfo}
 */
proto.VCSEC.FromVCSECMessage.prototype.getWhitelistentryinfo = function() {
  return /** @type{?proto.VCSEC.WhitelistEntryInfo} */ (
    jspb.Message.getWrapperField(this, proto.VCSEC.WhitelistEntryInfo, 17));
};


/**
 * @param {?proto.VCSEC.WhitelistEntryInfo|undefined} value
 * @return {!proto.VCSEC.FromVCSECMessage} returns this
*/
proto.VCSEC.FromVCSECMessage.prototype.setWhitelistentryinfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.VCSEC.FromVCSECMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.FromVCSECMessage} returns this
 */
proto.VCSEC.FromVCSECMessage.prototype.clearWhitelistentryinfo = function() {
  return this.setWhitelistentryinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.FromVCSECMessage.prototype.hasWhitelistentryinfo = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional Errors.NominalError nominalError = 46;
 * @return {?proto.Errors.NominalError}
 */
proto.VCSEC.FromVCSECMessage.prototype.getNominalerror = function() {
  return /** @type{?proto.Errors.NominalError} */ (
    jspb.Message.getWrapperField(this, errors_pb.NominalError, 46));
};


/**
 * @param {?proto.Errors.NominalError|undefined} value
 * @return {!proto.VCSEC.FromVCSECMessage} returns this
*/
proto.VCSEC.FromVCSECMessage.prototype.setNominalerror = function(value) {
  return jspb.Message.setOneofWrapperField(this, 46, proto.VCSEC.FromVCSECMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VCSEC.FromVCSECMessage} returns this
 */
proto.VCSEC.FromVCSECMessage.prototype.clearNominalerror = function() {
  return this.setNominalerror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VCSEC.FromVCSECMessage.prototype.hasNominalerror = function() {
  return jspb.Message.getField(this, 46) != null;
};


/**
 * @enum {number}
 */
proto.VCSEC.SignatureType = {
  SIGNATURE_TYPE_NONE: 0,
  SIGNATURE_TYPE_PRESENT_KEY: 2
};

/**
 * @enum {number}
 */
proto.VCSEC.KeyFormFactor = {
  KEY_FORM_FACTOR_UNKNOWN: 0,
  KEY_FORM_FACTOR_NFC_CARD: 1,
  KEY_FORM_FACTOR_IOS_DEVICE: 6,
  KEY_FORM_FACTOR_ANDROID_DEVICE: 7,
  KEY_FORM_FACTOR_CLOUD_KEY: 9
};

/**
 * @enum {number}
 */
proto.VCSEC.InformationRequestType = {
  INFORMATION_REQUEST_TYPE_GET_STATUS: 0,
  INFORMATION_REQUEST_TYPE_GET_WHITELIST_INFO: 5,
  INFORMATION_REQUEST_TYPE_GET_WHITELIST_ENTRY_INFO: 6
};

/**
 * @enum {number}
 */
proto.VCSEC.RKEAction_E = {
  RKE_ACTION_UNLOCK: 0,
  RKE_ACTION_LOCK: 1,
  RKE_ACTION_REMOTE_DRIVE: 20,
  RKE_ACTION_AUTO_SECURE_VEHICLE: 29,
  RKE_ACTION_WAKE_VEHICLE: 30
};

/**
 * @enum {number}
 */
proto.VCSEC.ClosureMoveType_E = {
  CLOSURE_MOVE_TYPE_NONE: 0,
  CLOSURE_MOVE_TYPE_MOVE: 1,
  CLOSURE_MOVE_TYPE_STOP: 2,
  CLOSURE_MOVE_TYPE_OPEN: 3,
  CLOSURE_MOVE_TYPE_CLOSE: 4
};

/**
 * @enum {number}
 */
proto.VCSEC.OperationStatus_E = {
  OPERATIONSTATUS_OK: 0,
  OPERATIONSTATUS_WAIT: 1,
  OPERATIONSTATUS_ERROR: 2
};

/**
 * @enum {number}
 */
proto.VCSEC.SignedMessage_information_E = {
  SIGNEDMESSAGE_INFORMATION_NONE: 0,
  SIGNEDMESSAGE_INFORMATION_FAULT_UNKNOWN: 1,
  SIGNEDMESSAGE_INFORMATION_FAULT_NOT_ON_WHITELIST: 2,
  SIGNEDMESSAGE_INFORMATION_FAULT_IV_SMALLER_THAN_EXPECTED: 3,
  SIGNEDMESSAGE_INFORMATION_FAULT_INVALID_TOKEN: 4,
  SIGNEDMESSAGE_INFORMATION_FAULT_TOKEN_AND_COUNTER_INVALID: 5,
  SIGNEDMESSAGE_INFORMATION_FAULT_AES_DECRYPT_AUTH: 6,
  SIGNEDMESSAGE_INFORMATION_FAULT_ECDSA_INPUT: 7,
  SIGNEDMESSAGE_INFORMATION_FAULT_ECDSA_SIGNATURE: 8,
  SIGNEDMESSAGE_INFORMATION_FAULT_LOCAL_ENTITY_START: 9,
  SIGNEDMESSAGE_INFORMATION_FAULT_LOCAL_ENTITY_RESULT: 10,
  SIGNEDMESSAGE_INFORMATION_FAULT_COULD_NOT_RETRIEVE_KEY: 11,
  SIGNEDMESSAGE_INFORMATION_FAULT_COULD_NOT_RETRIEVE_TOKEN: 12,
  SIGNEDMESSAGE_INFORMATION_FAULT_SIGNATURE_TOO_SHORT: 13,
  SIGNEDMESSAGE_INFORMATION_FAULT_TOKEN_IS_INCORRECT_LENGTH: 14,
  SIGNEDMESSAGE_INFORMATION_FAULT_INCORRECT_EPOCH: 15,
  SIGNEDMESSAGE_INFORMATION_FAULT_IV_INCORRECT_LENGTH: 16,
  SIGNEDMESSAGE_INFORMATION_FAULT_TIME_EXPIRED: 17,
  SIGNEDMESSAGE_INFORMATION_FAULT_NOT_PROVISIONED_WITH_IDENTITY: 18,
  SIGNEDMESSAGE_INFORMATION_FAULT_COULD_NOT_HASH_METADATA: 19
};

/**
 * @enum {number}
 */
proto.VCSEC.WhitelistOperation_information_E = {
  WHITELISTOPERATION_INFORMATION_NONE: 0,
  WHITELISTOPERATION_INFORMATION_UNDOCUMENTED_ERROR: 1,
  WHITELISTOPERATION_INFORMATION_NO_PERMISSION_TO_REMOVE_ONESELF: 2,
  WHITELISTOPERATION_INFORMATION_KEYFOB_SLOTS_FULL: 3,
  WHITELISTOPERATION_INFORMATION_WHITELIST_FULL: 4,
  WHITELISTOPERATION_INFORMATION_NO_PERMISSION_TO_ADD: 5,
  WHITELISTOPERATION_INFORMATION_INVALID_PUBLIC_KEY: 6,
  WHITELISTOPERATION_INFORMATION_NO_PERMISSION_TO_REMOVE: 7,
  WHITELISTOPERATION_INFORMATION_NO_PERMISSION_TO_CHANGE_PERMISSIONS: 8,
  WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_ELEVATE_OTHER_ABOVE_ONESELF: 9,
  WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_DEMOTE_SUPERIOR_TO_ONESELF: 10,
  WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_REMOVE_OWN_PERMISSIONS: 11,
  WHITELISTOPERATION_INFORMATION_PUBLIC_KEY_NOT_ON_WHITELIST: 12,
  WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_ADD_KEY_THAT_IS_ALREADY_ON_THE_WHITELIST: 13,
  WHITELISTOPERATION_INFORMATION_NOT_ALLOWED_TO_ADD_UNLESS_ON_READER: 14,
  WHITELISTOPERATION_INFORMATION_FM_MODIFYING_OUTSIDE_OF_F_MODE: 15,
  WHITELISTOPERATION_INFORMATION_FM_ATTEMPTING_TO_ADD_PERMANENT_KEY: 16,
  WHITELISTOPERATION_INFORMATION_FM_ATTEMPTING_TO_REMOVE_PERMANENT_KEY: 17,
  WHITELISTOPERATION_INFORMATION_KEYCHAIN_WHILE_FS_FULL: 18,
  WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_ADD_KEY_WITHOUT_ROLE: 19,
  WHITELISTOPERATION_INFORMATION_ATTEMPTING_TO_ADD_KEY_WITH_SERVICE_ROLE: 20,
  WHITELISTOPERATION_INFORMATION_NON_SERVICE_KEY_ATTEMPTING_TO_ADD_SERVICE_TECH: 21,
  WHITELISTOPERATION_INFORMATION_SERVICE_KEY_ATTEMPTING_TO_ADD_SERVICE_TECH_OUTSIDE_SERVICE_MODE: 22
};

/**
 * @enum {number}
 */
proto.VCSEC.ClosureState_E = {
  CLOSURESTATE_CLOSED: 0,
  CLOSURESTATE_OPEN: 1,
  CLOSURESTATE_AJAR: 2,
  CLOSURESTATE_UNKNOWN: 3,
  CLOSURESTATE_FAILED_UNLATCH: 4,
  CLOSURESTATE_OPENING: 5,
  CLOSURESTATE_CLOSING: 6
};

/**
 * @enum {number}
 */
proto.VCSEC.VehicleLockState_E = {
  VEHICLELOCKSTATE_UNLOCKED: 0,
  VEHICLELOCKSTATE_LOCKED: 1,
  VEHICLELOCKSTATE_INTERNAL_LOCKED: 2,
  VEHICLELOCKSTATE_SELECTIVE_UNLOCKED: 3
};

/**
 * @enum {number}
 */
proto.VCSEC.VehicleSleepStatus_E = {
  VEHICLE_SLEEP_STATUS_UNKNOWN: 0,
  VEHICLE_SLEEP_STATUS_AWAKE: 1,
  VEHICLE_SLEEP_STATUS_ASLEEP: 2
};

/**
 * @enum {number}
 */
proto.VCSEC.UserPresence_E = {
  VEHICLE_USER_PRESENCE_UNKNOWN: 0,
  VEHICLE_USER_PRESENCE_NOT_PRESENT: 1,
  VEHICLE_USER_PRESENCE_PRESENT: 2
};

goog.object.extend(exports, proto.VCSEC);
