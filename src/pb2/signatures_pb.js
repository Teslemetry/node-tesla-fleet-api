// source: signatures.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.Signatures.AES_GCM_Personalized_Signature_Data', null, global);
goog.exportSymbol('proto.Signatures.GetSessionInfoRequest', null, global);
goog.exportSymbol('proto.Signatures.HMAC_Personalized_Signature_Data', null, global);
goog.exportSymbol('proto.Signatures.HMAC_Signature_Data', null, global);
goog.exportSymbol('proto.Signatures.KeyIdentity', null, global);
goog.exportSymbol('proto.Signatures.KeyIdentity.IdentityTypeCase', null, global);
goog.exportSymbol('proto.Signatures.SessionInfo', null, global);
goog.exportSymbol('proto.Signatures.Session_Info_Status', null, global);
goog.exportSymbol('proto.Signatures.SignatureData', null, global);
goog.exportSymbol('proto.Signatures.SignatureData.SigTypeCase', null, global);
goog.exportSymbol('proto.Signatures.SignatureType', null, global);
goog.exportSymbol('proto.Signatures.Tag', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Signatures.KeyIdentity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Signatures.KeyIdentity.oneofGroups_);
};
goog.inherits(proto.Signatures.KeyIdentity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Signatures.KeyIdentity.displayName = 'proto.Signatures.KeyIdentity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Signatures.AES_GCM_Personalized_Signature_Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Signatures.AES_GCM_Personalized_Signature_Data.displayName = 'proto.Signatures.AES_GCM_Personalized_Signature_Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Signatures.HMAC_Signature_Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Signatures.HMAC_Signature_Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Signatures.HMAC_Signature_Data.displayName = 'proto.Signatures.HMAC_Signature_Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Signatures.HMAC_Personalized_Signature_Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Signatures.HMAC_Personalized_Signature_Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Signatures.HMAC_Personalized_Signature_Data.displayName = 'proto.Signatures.HMAC_Personalized_Signature_Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Signatures.SignatureData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Signatures.SignatureData.oneofGroups_);
};
goog.inherits(proto.Signatures.SignatureData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Signatures.SignatureData.displayName = 'proto.Signatures.SignatureData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Signatures.GetSessionInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Signatures.GetSessionInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Signatures.GetSessionInfoRequest.displayName = 'proto.Signatures.GetSessionInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Signatures.SessionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Signatures.SessionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Signatures.SessionInfo.displayName = 'proto.Signatures.SessionInfo';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Signatures.KeyIdentity.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.Signatures.KeyIdentity.IdentityTypeCase = {
  IDENTITY_TYPE_NOT_SET: 0,
  PUBLIC_KEY: 1
};

/**
 * @return {proto.Signatures.KeyIdentity.IdentityTypeCase}
 */
proto.Signatures.KeyIdentity.prototype.getIdentityTypeCase = function() {
  return /** @type {proto.Signatures.KeyIdentity.IdentityTypeCase} */(jspb.Message.computeOneofCase(this, proto.Signatures.KeyIdentity.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Signatures.KeyIdentity.prototype.toObject = function(opt_includeInstance) {
  return proto.Signatures.KeyIdentity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Signatures.KeyIdentity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signatures.KeyIdentity.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: msg.getPublicKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Signatures.KeyIdentity}
 */
proto.Signatures.KeyIdentity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Signatures.KeyIdentity;
  return proto.Signatures.KeyIdentity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Signatures.KeyIdentity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Signatures.KeyIdentity}
 */
proto.Signatures.KeyIdentity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Signatures.KeyIdentity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Signatures.KeyIdentity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Signatures.KeyIdentity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signatures.KeyIdentity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Signatures.KeyIdentity.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.Signatures.KeyIdentity.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.Signatures.KeyIdentity.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Signatures.KeyIdentity} returns this
 */
proto.Signatures.KeyIdentity.prototype.setPublicKey = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.Signatures.KeyIdentity.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Signatures.KeyIdentity} returns this
 */
proto.Signatures.KeyIdentity.prototype.clearPublicKey = function() {
  return jspb.Message.setOneofField(this, 1, proto.Signatures.KeyIdentity.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signatures.KeyIdentity.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.toObject = function(opt_includeInstance) {
  return proto.Signatures.AES_GCM_Personalized_Signature_Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Signatures.AES_GCM_Personalized_Signature_Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    epoch: msg.getEpoch_asB64(),
    nonce: msg.getNonce_asB64(),
    counter: jspb.Message.getFieldWithDefault(msg, 3, 0),
    expiresAt: jspb.Message.getFieldWithDefault(msg, 4, 0),
    tag: msg.getTag_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Signatures.AES_GCM_Personalized_Signature_Data}
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Signatures.AES_GCM_Personalized_Signature_Data;
  return proto.Signatures.AES_GCM_Personalized_Signature_Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Signatures.AES_GCM_Personalized_Signature_Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Signatures.AES_GCM_Personalized_Signature_Data}
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEpoch(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCounter(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setExpiresAt(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Signatures.AES_GCM_Personalized_Signature_Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Signatures.AES_GCM_Personalized_Signature_Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpoch_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCounter();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getExpiresAt();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getTag_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes epoch = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.getEpoch = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes epoch = 1;
 * This is a type-conversion wrapper around `getEpoch()`
 * @return {string}
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.getEpoch_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEpoch()));
};


/**
 * optional bytes epoch = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEpoch()`
 * @return {!Uint8Array}
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.getEpoch_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEpoch()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Signatures.AES_GCM_Personalized_Signature_Data} returns this
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes nonce = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes nonce = 2;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Signatures.AES_GCM_Personalized_Signature_Data} returns this
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 counter = 3;
 * @return {number}
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Signatures.AES_GCM_Personalized_Signature_Data} returns this
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.setCounter = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional fixed32 expires_at = 4;
 * @return {number}
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.getExpiresAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Signatures.AES_GCM_Personalized_Signature_Data} returns this
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.setExpiresAt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes tag = 5;
 * @return {!(string|Uint8Array)}
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.getTag = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes tag = 5;
 * This is a type-conversion wrapper around `getTag()`
 * @return {string}
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.getTag_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTag()));
};


/**
 * optional bytes tag = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTag()`
 * @return {!Uint8Array}
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.getTag_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTag()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Signatures.AES_GCM_Personalized_Signature_Data} returns this
 */
proto.Signatures.AES_GCM_Personalized_Signature_Data.prototype.setTag = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Signatures.HMAC_Signature_Data.prototype.toObject = function(opt_includeInstance) {
  return proto.Signatures.HMAC_Signature_Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Signatures.HMAC_Signature_Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signatures.HMAC_Signature_Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    tag: msg.getTag_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Signatures.HMAC_Signature_Data}
 */
proto.Signatures.HMAC_Signature_Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Signatures.HMAC_Signature_Data;
  return proto.Signatures.HMAC_Signature_Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Signatures.HMAC_Signature_Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Signatures.HMAC_Signature_Data}
 */
proto.Signatures.HMAC_Signature_Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Signatures.HMAC_Signature_Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Signatures.HMAC_Signature_Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Signatures.HMAC_Signature_Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signatures.HMAC_Signature_Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTag_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes tag = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Signatures.HMAC_Signature_Data.prototype.getTag = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes tag = 1;
 * This is a type-conversion wrapper around `getTag()`
 * @return {string}
 */
proto.Signatures.HMAC_Signature_Data.prototype.getTag_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTag()));
};


/**
 * optional bytes tag = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTag()`
 * @return {!Uint8Array}
 */
proto.Signatures.HMAC_Signature_Data.prototype.getTag_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTag()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Signatures.HMAC_Signature_Data} returns this
 */
proto.Signatures.HMAC_Signature_Data.prototype.setTag = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Signatures.HMAC_Personalized_Signature_Data.prototype.toObject = function(opt_includeInstance) {
  return proto.Signatures.HMAC_Personalized_Signature_Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Signatures.HMAC_Personalized_Signature_Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signatures.HMAC_Personalized_Signature_Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    epoch: msg.getEpoch_asB64(),
    counter: jspb.Message.getFieldWithDefault(msg, 2, 0),
    expiresAt: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tag: msg.getTag_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Signatures.HMAC_Personalized_Signature_Data}
 */
proto.Signatures.HMAC_Personalized_Signature_Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Signatures.HMAC_Personalized_Signature_Data;
  return proto.Signatures.HMAC_Personalized_Signature_Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Signatures.HMAC_Personalized_Signature_Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Signatures.HMAC_Personalized_Signature_Data}
 */
proto.Signatures.HMAC_Personalized_Signature_Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEpoch(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCounter(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setExpiresAt(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Signatures.HMAC_Personalized_Signature_Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Signatures.HMAC_Personalized_Signature_Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Signatures.HMAC_Personalized_Signature_Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signatures.HMAC_Personalized_Signature_Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpoch_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCounter();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getExpiresAt();
  if (f !== 0) {
    writer.writeFixed32(
      3,
      f
    );
  }
  f = message.getTag_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes epoch = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Signatures.HMAC_Personalized_Signature_Data.prototype.getEpoch = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes epoch = 1;
 * This is a type-conversion wrapper around `getEpoch()`
 * @return {string}
 */
proto.Signatures.HMAC_Personalized_Signature_Data.prototype.getEpoch_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEpoch()));
};


/**
 * optional bytes epoch = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEpoch()`
 * @return {!Uint8Array}
 */
proto.Signatures.HMAC_Personalized_Signature_Data.prototype.getEpoch_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEpoch()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Signatures.HMAC_Personalized_Signature_Data} returns this
 */
proto.Signatures.HMAC_Personalized_Signature_Data.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 counter = 2;
 * @return {number}
 */
proto.Signatures.HMAC_Personalized_Signature_Data.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Signatures.HMAC_Personalized_Signature_Data} returns this
 */
proto.Signatures.HMAC_Personalized_Signature_Data.prototype.setCounter = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional fixed32 expires_at = 3;
 * @return {number}
 */
proto.Signatures.HMAC_Personalized_Signature_Data.prototype.getExpiresAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Signatures.HMAC_Personalized_Signature_Data} returns this
 */
proto.Signatures.HMAC_Personalized_Signature_Data.prototype.setExpiresAt = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes tag = 4;
 * @return {!(string|Uint8Array)}
 */
proto.Signatures.HMAC_Personalized_Signature_Data.prototype.getTag = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes tag = 4;
 * This is a type-conversion wrapper around `getTag()`
 * @return {string}
 */
proto.Signatures.HMAC_Personalized_Signature_Data.prototype.getTag_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTag()));
};


/**
 * optional bytes tag = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTag()`
 * @return {!Uint8Array}
 */
proto.Signatures.HMAC_Personalized_Signature_Data.prototype.getTag_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTag()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Signatures.HMAC_Personalized_Signature_Data} returns this
 */
proto.Signatures.HMAC_Personalized_Signature_Data.prototype.setTag = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Signatures.SignatureData.oneofGroups_ = [[5,6,8]];

/**
 * @enum {number}
 */
proto.Signatures.SignatureData.SigTypeCase = {
  SIG_TYPE_NOT_SET: 0,
  AES_GCM_PERSONALIZED_DATA: 5,
  SESSION_INFO_TAG: 6,
  HMAC_PERSONALIZED_DATA: 8
};

/**
 * @return {proto.Signatures.SignatureData.SigTypeCase}
 */
proto.Signatures.SignatureData.prototype.getSigTypeCase = function() {
  return /** @type {proto.Signatures.SignatureData.SigTypeCase} */(jspb.Message.computeOneofCase(this, proto.Signatures.SignatureData.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Signatures.SignatureData.prototype.toObject = function(opt_includeInstance) {
  return proto.Signatures.SignatureData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Signatures.SignatureData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signatures.SignatureData.toObject = function(includeInstance, msg) {
  var f, obj = {
    signerIdentity: (f = msg.getSignerIdentity()) && proto.Signatures.KeyIdentity.toObject(includeInstance, f),
    aesGcmPersonalizedData: (f = msg.getAesGcmPersonalizedData()) && proto.Signatures.AES_GCM_Personalized_Signature_Data.toObject(includeInstance, f),
    sessionInfoTag: (f = msg.getSessionInfoTag()) && proto.Signatures.HMAC_Signature_Data.toObject(includeInstance, f),
    hmacPersonalizedData: (f = msg.getHmacPersonalizedData()) && proto.Signatures.HMAC_Personalized_Signature_Data.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Signatures.SignatureData}
 */
proto.Signatures.SignatureData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Signatures.SignatureData;
  return proto.Signatures.SignatureData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Signatures.SignatureData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Signatures.SignatureData}
 */
proto.Signatures.SignatureData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Signatures.KeyIdentity;
      reader.readMessage(value,proto.Signatures.KeyIdentity.deserializeBinaryFromReader);
      msg.setSignerIdentity(value);
      break;
    case 5:
      var value = new proto.Signatures.AES_GCM_Personalized_Signature_Data;
      reader.readMessage(value,proto.Signatures.AES_GCM_Personalized_Signature_Data.deserializeBinaryFromReader);
      msg.setAesGcmPersonalizedData(value);
      break;
    case 6:
      var value = new proto.Signatures.HMAC_Signature_Data;
      reader.readMessage(value,proto.Signatures.HMAC_Signature_Data.deserializeBinaryFromReader);
      msg.setSessionInfoTag(value);
      break;
    case 8:
      var value = new proto.Signatures.HMAC_Personalized_Signature_Data;
      reader.readMessage(value,proto.Signatures.HMAC_Personalized_Signature_Data.deserializeBinaryFromReader);
      msg.setHmacPersonalizedData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Signatures.SignatureData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Signatures.SignatureData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Signatures.SignatureData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signatures.SignatureData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignerIdentity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Signatures.KeyIdentity.serializeBinaryToWriter
    );
  }
  f = message.getAesGcmPersonalizedData();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Signatures.AES_GCM_Personalized_Signature_Data.serializeBinaryToWriter
    );
  }
  f = message.getSessionInfoTag();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Signatures.HMAC_Signature_Data.serializeBinaryToWriter
    );
  }
  f = message.getHmacPersonalizedData();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Signatures.HMAC_Personalized_Signature_Data.serializeBinaryToWriter
    );
  }
};


/**
 * optional KeyIdentity signer_identity = 1;
 * @return {?proto.Signatures.KeyIdentity}
 */
proto.Signatures.SignatureData.prototype.getSignerIdentity = function() {
  return /** @type{?proto.Signatures.KeyIdentity} */ (
    jspb.Message.getWrapperField(this, proto.Signatures.KeyIdentity, 1));
};


/**
 * @param {?proto.Signatures.KeyIdentity|undefined} value
 * @return {!proto.Signatures.SignatureData} returns this
*/
proto.Signatures.SignatureData.prototype.setSignerIdentity = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Signatures.SignatureData} returns this
 */
proto.Signatures.SignatureData.prototype.clearSignerIdentity = function() {
  return this.setSignerIdentity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signatures.SignatureData.prototype.hasSignerIdentity = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AES_GCM_Personalized_Signature_Data AES_GCM_Personalized_data = 5;
 * @return {?proto.Signatures.AES_GCM_Personalized_Signature_Data}
 */
proto.Signatures.SignatureData.prototype.getAesGcmPersonalizedData = function() {
  return /** @type{?proto.Signatures.AES_GCM_Personalized_Signature_Data} */ (
    jspb.Message.getWrapperField(this, proto.Signatures.AES_GCM_Personalized_Signature_Data, 5));
};


/**
 * @param {?proto.Signatures.AES_GCM_Personalized_Signature_Data|undefined} value
 * @return {!proto.Signatures.SignatureData} returns this
*/
proto.Signatures.SignatureData.prototype.setAesGcmPersonalizedData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.Signatures.SignatureData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Signatures.SignatureData} returns this
 */
proto.Signatures.SignatureData.prototype.clearAesGcmPersonalizedData = function() {
  return this.setAesGcmPersonalizedData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signatures.SignatureData.prototype.hasAesGcmPersonalizedData = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional HMAC_Signature_Data session_info_tag = 6;
 * @return {?proto.Signatures.HMAC_Signature_Data}
 */
proto.Signatures.SignatureData.prototype.getSessionInfoTag = function() {
  return /** @type{?proto.Signatures.HMAC_Signature_Data} */ (
    jspb.Message.getWrapperField(this, proto.Signatures.HMAC_Signature_Data, 6));
};


/**
 * @param {?proto.Signatures.HMAC_Signature_Data|undefined} value
 * @return {!proto.Signatures.SignatureData} returns this
*/
proto.Signatures.SignatureData.prototype.setSessionInfoTag = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.Signatures.SignatureData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Signatures.SignatureData} returns this
 */
proto.Signatures.SignatureData.prototype.clearSessionInfoTag = function() {
  return this.setSessionInfoTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signatures.SignatureData.prototype.hasSessionInfoTag = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional HMAC_Personalized_Signature_Data HMAC_Personalized_data = 8;
 * @return {?proto.Signatures.HMAC_Personalized_Signature_Data}
 */
proto.Signatures.SignatureData.prototype.getHmacPersonalizedData = function() {
  return /** @type{?proto.Signatures.HMAC_Personalized_Signature_Data} */ (
    jspb.Message.getWrapperField(this, proto.Signatures.HMAC_Personalized_Signature_Data, 8));
};


/**
 * @param {?proto.Signatures.HMAC_Personalized_Signature_Data|undefined} value
 * @return {!proto.Signatures.SignatureData} returns this
*/
proto.Signatures.SignatureData.prototype.setHmacPersonalizedData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.Signatures.SignatureData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Signatures.SignatureData} returns this
 */
proto.Signatures.SignatureData.prototype.clearHmacPersonalizedData = function() {
  return this.setHmacPersonalizedData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signatures.SignatureData.prototype.hasHmacPersonalizedData = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Signatures.GetSessionInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Signatures.GetSessionInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Signatures.GetSessionInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signatures.GetSessionInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyIdentity: (f = msg.getKeyIdentity()) && proto.Signatures.KeyIdentity.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Signatures.GetSessionInfoRequest}
 */
proto.Signatures.GetSessionInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Signatures.GetSessionInfoRequest;
  return proto.Signatures.GetSessionInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Signatures.GetSessionInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Signatures.GetSessionInfoRequest}
 */
proto.Signatures.GetSessionInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Signatures.KeyIdentity;
      reader.readMessage(value,proto.Signatures.KeyIdentity.deserializeBinaryFromReader);
      msg.setKeyIdentity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Signatures.GetSessionInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Signatures.GetSessionInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Signatures.GetSessionInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signatures.GetSessionInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyIdentity();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Signatures.KeyIdentity.serializeBinaryToWriter
    );
  }
};


/**
 * optional KeyIdentity key_identity = 1;
 * @return {?proto.Signatures.KeyIdentity}
 */
proto.Signatures.GetSessionInfoRequest.prototype.getKeyIdentity = function() {
  return /** @type{?proto.Signatures.KeyIdentity} */ (
    jspb.Message.getWrapperField(this, proto.Signatures.KeyIdentity, 1));
};


/**
 * @param {?proto.Signatures.KeyIdentity|undefined} value
 * @return {!proto.Signatures.GetSessionInfoRequest} returns this
*/
proto.Signatures.GetSessionInfoRequest.prototype.setKeyIdentity = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Signatures.GetSessionInfoRequest} returns this
 */
proto.Signatures.GetSessionInfoRequest.prototype.clearKeyIdentity = function() {
  return this.setKeyIdentity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Signatures.GetSessionInfoRequest.prototype.hasKeyIdentity = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Signatures.SessionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Signatures.SessionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Signatures.SessionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signatures.SessionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    counter: jspb.Message.getFieldWithDefault(msg, 1, 0),
    publickey: msg.getPublickey_asB64(),
    epoch: msg.getEpoch_asB64(),
    clockTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    status: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Signatures.SessionInfo}
 */
proto.Signatures.SessionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Signatures.SessionInfo;
  return proto.Signatures.SessionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Signatures.SessionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Signatures.SessionInfo}
 */
proto.Signatures.SessionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCounter(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEpoch(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setClockTime(value);
      break;
    case 5:
      var value = /** @type {!proto.Signatures.Session_Info_Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Signatures.SessionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Signatures.SessionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Signatures.SessionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Signatures.SessionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCounter();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getEpoch_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getClockTime();
  if (f !== 0) {
    writer.writeFixed32(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional uint32 counter = 1;
 * @return {number}
 */
proto.Signatures.SessionInfo.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Signatures.SessionInfo} returns this
 */
proto.Signatures.SessionInfo.prototype.setCounter = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes publicKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Signatures.SessionInfo.prototype.getPublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes publicKey = 2;
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {string}
 */
proto.Signatures.SessionInfo.prototype.getPublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublickey()));
};


/**
 * optional bytes publicKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {!Uint8Array}
 */
proto.Signatures.SessionInfo.prototype.getPublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublickey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Signatures.SessionInfo} returns this
 */
proto.Signatures.SessionInfo.prototype.setPublickey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes epoch = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Signatures.SessionInfo.prototype.getEpoch = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes epoch = 3;
 * This is a type-conversion wrapper around `getEpoch()`
 * @return {string}
 */
proto.Signatures.SessionInfo.prototype.getEpoch_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEpoch()));
};


/**
 * optional bytes epoch = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEpoch()`
 * @return {!Uint8Array}
 */
proto.Signatures.SessionInfo.prototype.getEpoch_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEpoch()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Signatures.SessionInfo} returns this
 */
proto.Signatures.SessionInfo.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional fixed32 clock_time = 4;
 * @return {number}
 */
proto.Signatures.SessionInfo.prototype.getClockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Signatures.SessionInfo} returns this
 */
proto.Signatures.SessionInfo.prototype.setClockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Session_Info_Status status = 5;
 * @return {!proto.Signatures.Session_Info_Status}
 */
proto.Signatures.SessionInfo.prototype.getStatus = function() {
  return /** @type {!proto.Signatures.Session_Info_Status} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.Signatures.Session_Info_Status} value
 * @return {!proto.Signatures.SessionInfo} returns this
 */
proto.Signatures.SessionInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.Signatures.Tag = {
  TAG_SIGNATURE_TYPE: 0,
  TAG_DOMAIN: 1,
  TAG_PERSONALIZATION: 2,
  TAG_EPOCH: 3,
  TAG_EXPIRES_AT: 4,
  TAG_COUNTER: 5,
  TAG_CHALLENGE: 6,
  TAG_FLAGS: 7,
  TAG_END: 255
};

/**
 * @enum {number}
 */
proto.Signatures.SignatureType = {
  SIGNATURE_TYPE_AES_GCM: 0,
  SIGNATURE_TYPE_AES_GCM_PERSONALIZED: 5,
  SIGNATURE_TYPE_HMAC: 6,
  SIGNATURE_TYPE_HMAC_PERSONALIZED: 8
};

/**
 * @enum {number}
 */
proto.Signatures.Session_Info_Status = {
  SESSION_INFO_STATUS_OK: 0,
  SESSION_INFO_STATUS_KEY_NOT_ON_WHITELIST: 1
};

goog.object.extend(exports, proto.Signatures);
