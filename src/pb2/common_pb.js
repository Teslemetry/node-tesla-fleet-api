// source: common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.CarServer.Invalid', null, global);
goog.exportSymbol('proto.CarServer.LatLong', null, global);
goog.exportSymbol('proto.CarServer.OffPeakChargingTimes', null, global);
goog.exportSymbol('proto.CarServer.OffPeakChargingTimes.TimesCase', null, global);
goog.exportSymbol('proto.CarServer.PreconditioningTimes', null, global);
goog.exportSymbol('proto.CarServer.PreconditioningTimes.TimesCase', null, global);
goog.exportSymbol('proto.CarServer.Void', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CarServer.Void = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CarServer.Void, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CarServer.Void.displayName = 'proto.CarServer.Void';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CarServer.LatLong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CarServer.LatLong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CarServer.LatLong.displayName = 'proto.CarServer.LatLong';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CarServer.PreconditioningTimes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.CarServer.PreconditioningTimes.oneofGroups_);
};
goog.inherits(proto.CarServer.PreconditioningTimes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CarServer.PreconditioningTimes.displayName = 'proto.CarServer.PreconditioningTimes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CarServer.OffPeakChargingTimes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.CarServer.OffPeakChargingTimes.oneofGroups_);
};
goog.inherits(proto.CarServer.OffPeakChargingTimes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CarServer.OffPeakChargingTimes.displayName = 'proto.CarServer.OffPeakChargingTimes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CarServer.Void.prototype.toObject = function(opt_includeInstance) {
  return proto.CarServer.Void.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CarServer.Void} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CarServer.Void.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CarServer.Void}
 */
proto.CarServer.Void.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CarServer.Void;
  return proto.CarServer.Void.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CarServer.Void} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CarServer.Void}
 */
proto.CarServer.Void.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CarServer.Void.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CarServer.Void.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CarServer.Void} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CarServer.Void.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CarServer.LatLong.prototype.toObject = function(opt_includeInstance) {
  return proto.CarServer.LatLong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CarServer.LatLong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CarServer.LatLong.toObject = function(includeInstance, msg) {
  var f, obj = {
    latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CarServer.LatLong}
 */
proto.CarServer.LatLong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CarServer.LatLong;
  return proto.CarServer.LatLong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CarServer.LatLong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CarServer.LatLong}
 */
proto.CarServer.LatLong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitude(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CarServer.LatLong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CarServer.LatLong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CarServer.LatLong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CarServer.LatLong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float latitude = 1;
 * @return {number}
 */
proto.CarServer.LatLong.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CarServer.LatLong} returns this
 */
proto.CarServer.LatLong.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float longitude = 2;
 * @return {number}
 */
proto.CarServer.LatLong.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CarServer.LatLong} returns this
 */
proto.CarServer.LatLong.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.CarServer.PreconditioningTimes.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.CarServer.PreconditioningTimes.TimesCase = {
  TIMES_NOT_SET: 0,
  ALL_WEEK: 1,
  WEEKDAYS: 2
};

/**
 * @return {proto.CarServer.PreconditioningTimes.TimesCase}
 */
proto.CarServer.PreconditioningTimes.prototype.getTimesCase = function() {
  return /** @type {proto.CarServer.PreconditioningTimes.TimesCase} */(jspb.Message.computeOneofCase(this, proto.CarServer.PreconditioningTimes.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CarServer.PreconditioningTimes.prototype.toObject = function(opt_includeInstance) {
  return proto.CarServer.PreconditioningTimes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CarServer.PreconditioningTimes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CarServer.PreconditioningTimes.toObject = function(includeInstance, msg) {
  var f, obj = {
    allWeek: (f = msg.getAllWeek()) && proto.CarServer.Void.toObject(includeInstance, f),
    weekdays: (f = msg.getWeekdays()) && proto.CarServer.Void.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CarServer.PreconditioningTimes}
 */
proto.CarServer.PreconditioningTimes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CarServer.PreconditioningTimes;
  return proto.CarServer.PreconditioningTimes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CarServer.PreconditioningTimes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CarServer.PreconditioningTimes}
 */
proto.CarServer.PreconditioningTimes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CarServer.Void;
      reader.readMessage(value,proto.CarServer.Void.deserializeBinaryFromReader);
      msg.setAllWeek(value);
      break;
    case 2:
      var value = new proto.CarServer.Void;
      reader.readMessage(value,proto.CarServer.Void.deserializeBinaryFromReader);
      msg.setWeekdays(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CarServer.PreconditioningTimes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CarServer.PreconditioningTimes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CarServer.PreconditioningTimes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CarServer.PreconditioningTimes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllWeek();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.CarServer.Void.serializeBinaryToWriter
    );
  }
  f = message.getWeekdays();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CarServer.Void.serializeBinaryToWriter
    );
  }
};


/**
 * optional Void all_week = 1;
 * @return {?proto.CarServer.Void}
 */
proto.CarServer.PreconditioningTimes.prototype.getAllWeek = function() {
  return /** @type{?proto.CarServer.Void} */ (
    jspb.Message.getWrapperField(this, proto.CarServer.Void, 1));
};


/**
 * @param {?proto.CarServer.Void|undefined} value
 * @return {!proto.CarServer.PreconditioningTimes} returns this
*/
proto.CarServer.PreconditioningTimes.prototype.setAllWeek = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.CarServer.PreconditioningTimes.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CarServer.PreconditioningTimes} returns this
 */
proto.CarServer.PreconditioningTimes.prototype.clearAllWeek = function() {
  return this.setAllWeek(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CarServer.PreconditioningTimes.prototype.hasAllWeek = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Void weekdays = 2;
 * @return {?proto.CarServer.Void}
 */
proto.CarServer.PreconditioningTimes.prototype.getWeekdays = function() {
  return /** @type{?proto.CarServer.Void} */ (
    jspb.Message.getWrapperField(this, proto.CarServer.Void, 2));
};


/**
 * @param {?proto.CarServer.Void|undefined} value
 * @return {!proto.CarServer.PreconditioningTimes} returns this
*/
proto.CarServer.PreconditioningTimes.prototype.setWeekdays = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.CarServer.PreconditioningTimes.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CarServer.PreconditioningTimes} returns this
 */
proto.CarServer.PreconditioningTimes.prototype.clearWeekdays = function() {
  return this.setWeekdays(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CarServer.PreconditioningTimes.prototype.hasWeekdays = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.CarServer.OffPeakChargingTimes.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.CarServer.OffPeakChargingTimes.TimesCase = {
  TIMES_NOT_SET: 0,
  ALL_WEEK: 1,
  WEEKDAYS: 2
};

/**
 * @return {proto.CarServer.OffPeakChargingTimes.TimesCase}
 */
proto.CarServer.OffPeakChargingTimes.prototype.getTimesCase = function() {
  return /** @type {proto.CarServer.OffPeakChargingTimes.TimesCase} */(jspb.Message.computeOneofCase(this, proto.CarServer.OffPeakChargingTimes.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CarServer.OffPeakChargingTimes.prototype.toObject = function(opt_includeInstance) {
  return proto.CarServer.OffPeakChargingTimes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CarServer.OffPeakChargingTimes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CarServer.OffPeakChargingTimes.toObject = function(includeInstance, msg) {
  var f, obj = {
    allWeek: (f = msg.getAllWeek()) && proto.CarServer.Void.toObject(includeInstance, f),
    weekdays: (f = msg.getWeekdays()) && proto.CarServer.Void.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CarServer.OffPeakChargingTimes}
 */
proto.CarServer.OffPeakChargingTimes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CarServer.OffPeakChargingTimes;
  return proto.CarServer.OffPeakChargingTimes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CarServer.OffPeakChargingTimes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CarServer.OffPeakChargingTimes}
 */
proto.CarServer.OffPeakChargingTimes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CarServer.Void;
      reader.readMessage(value,proto.CarServer.Void.deserializeBinaryFromReader);
      msg.setAllWeek(value);
      break;
    case 2:
      var value = new proto.CarServer.Void;
      reader.readMessage(value,proto.CarServer.Void.deserializeBinaryFromReader);
      msg.setWeekdays(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CarServer.OffPeakChargingTimes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CarServer.OffPeakChargingTimes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CarServer.OffPeakChargingTimes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CarServer.OffPeakChargingTimes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllWeek();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.CarServer.Void.serializeBinaryToWriter
    );
  }
  f = message.getWeekdays();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CarServer.Void.serializeBinaryToWriter
    );
  }
};


/**
 * optional Void all_week = 1;
 * @return {?proto.CarServer.Void}
 */
proto.CarServer.OffPeakChargingTimes.prototype.getAllWeek = function() {
  return /** @type{?proto.CarServer.Void} */ (
    jspb.Message.getWrapperField(this, proto.CarServer.Void, 1));
};


/**
 * @param {?proto.CarServer.Void|undefined} value
 * @return {!proto.CarServer.OffPeakChargingTimes} returns this
*/
proto.CarServer.OffPeakChargingTimes.prototype.setAllWeek = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.CarServer.OffPeakChargingTimes.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CarServer.OffPeakChargingTimes} returns this
 */
proto.CarServer.OffPeakChargingTimes.prototype.clearAllWeek = function() {
  return this.setAllWeek(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CarServer.OffPeakChargingTimes.prototype.hasAllWeek = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Void weekdays = 2;
 * @return {?proto.CarServer.Void}
 */
proto.CarServer.OffPeakChargingTimes.prototype.getWeekdays = function() {
  return /** @type{?proto.CarServer.Void} */ (
    jspb.Message.getWrapperField(this, proto.CarServer.Void, 2));
};


/**
 * @param {?proto.CarServer.Void|undefined} value
 * @return {!proto.CarServer.OffPeakChargingTimes} returns this
*/
proto.CarServer.OffPeakChargingTimes.prototype.setWeekdays = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.CarServer.OffPeakChargingTimes.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CarServer.OffPeakChargingTimes} returns this
 */
proto.CarServer.OffPeakChargingTimes.prototype.clearWeekdays = function() {
  return this.setWeekdays(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CarServer.OffPeakChargingTimes.prototype.hasWeekdays = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.CarServer.Invalid = {
  INVALID: 0
};

goog.object.extend(exports, proto.CarServer);
